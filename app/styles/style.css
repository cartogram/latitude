/*------------------------------------*\
    $COLORS
\*------------------------------------*/
/** Links */
/*------------------------------------*\
    $FONTS
\*------------------------------------*/
/**
 * Declare specific font families and weights
 */
/*------------------------------------*\
    $SITE COMPONENETS
\*------------------------------------*/
/**
 * Declare specific font families and weights
 */
/*------------------------------------*\
    $DEFAULTS
\*------------------------------------*/
/**
 * inuit.css’ default variables. Redefine these in your `_vars.scss` file (found
 * in the inuit.css-web-template) to override them.
 */
/*------------------------------------*\
    $DEBUG
\*------------------------------------*/
/**
 * Debug mode will visually highlight any potential markup/accessibility quirks
 * in the browser. Set to `true` or `false`.
 */
/*------------------------------------*\
    $BORDER-BOX
\*------------------------------------*/
/**
 * Do you want all elements to adopt `box-sizing:border-box;` as per
 * paulirish.com/2012/box-sizing-border-box-ftw ?
 */
/*------------------------------------*\
    $BASE
\*------------------------------------*/
/**
 * Base stuff
 */
/**
 * Base font-family. 
 */
/**
 * Default colour for objects’ borders etc.
 */
/*------------------------------------*\
    $RESPONSIVE
\*------------------------------------*/
/**
 * Responsiveness?
 */
/**
 * Responsiveness for widescreen/high resolution desktop monitors and beyond?
 * Note: `$responsive` variable above must be set to true before enabling this.
 */
/**
 * Responsive push and pull produce a LOT of code, only turn them on if you
 * definitely need them.
 */
/**
 * Note: `$push` variable above must be set to true before enabling these.
 */
/**
 * Note: `$pull` variable above must be set to true before enabling these.
 */
/**
 * Tell inuit.css when breakpoints start.
 */
/*------------------------------------*\
    $FONT-SIZES
\*------------------------------------*/
/**
 * Font-sizes (in pixels). Refer to relevant sections for their implementations.
 */
/*------------------------------------*\
    $QUOTES
\*------------------------------------*/
/**
 * English quote marks?
 */
/**
 * If you want English quotes then please do not edit these; they’re only here
 * because Sass needs them.
 */
/**
 * If you need non-English quotes, please alter the following values accordingly:
 */
/*------------------------------------*\
    $BRAND
\*------------------------------------*/
/**
 * Brand stuff
 */
/**
 * How big would you like round corners to be by default?
 */
/*------------------------------------*\
    $OBJECTS AND ABSTRACTIONS
\*------------------------------------*/
/**
 * Which objects and abstractions would you like to use?
 */
/*------------------------------------*\
    $FRAMEWORK
\*------------------------------------*/
/**
 * inuit.css will work these next ones out for use within the framework.
 *
 * Assign our `$base-line-height` to a new spacing var for more transparency.
 */
/*------------------------------------*\
    INUIT.CSS
\*------------------------------------*/
/*!*
 *
 * inuitcss.com -- @inuitcss -- @csswizardry
 *
 */
/**
 * inuit.css acts as a base stylesheet which you should extend with your own
 * theme stylesheet.
 *
 * inuit.css aims to do the heavy lifting; sorting objects and abstractions,
 * design patterns and fiddly bits of CSS, whilst leaving as much design as
 * possible to you. inuit.css is the scaffolding to your decorator.
 *
 * This stylesheet is heavily documented and contains lots of comments, please
 * take care to read and refer to them as you build. For further support please
 * tweet at @inuitcss.
 *
 * Owing to the amount of comments please only ever use minified CSS in
 * production. This file is purely a dev document.
 *
 * The table of contents below maps to section titles of the same name, to jump
 * to any section simply run a find for $[SECTION-TITLE].
 *
 * Most objects and abstractions come with a chunk of markup that you should be
 * able to paste into any view to quickly see how the CSS works in conjunction
 * with the correct HTML.
 *
 * inuit.css is written to this standard: github.com/csswizardry/CSS-Guidelines
 *
 * LICENSE
 *
 * Copyright 2013 Harry Roberts
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Thank you for choosing inuit.css. May your web fonts render perfectly.
 */
/*------------------------------------*\
    $CONTENTS
\*------------------------------------*/
/**
 * CONTENTS............You’re reading it!
 * WARNING.............Here be dragons!
 * IMPORTS.............Begin importing the sections below
 *
 * MIXINS..............Super-simple Sass stuff
 * NORMALIZE...........normalize.css
 * RESET...............Set some defaults
 * CLEARFIX............
 * SHARED..............Shared declarations
 *
 * MAIN................High-level elements like `html`, `body`, etc.
 * HEADINGS............Double-stranded heading hierarchy
 * PARAGRAPHS..........
 * SMALLPRINT..........Smaller text elements like `small`
 * QUOTES..............
 * CODE................
 * LISTS...............
 * IMAGES..............
 * TABLES..............
 * FORMS...............
 *
 * GRIDS...............Fluid, proportional and nestable grids
 * FLEXBOX.............Crudely emulate flexbox
 * COLUMNS.............CSS3 columns
 * NAV.................A simple abstraction to put a list in horizontal nav mode
 * OPTIONS.............Grouped nav items
 * PAGINATION..........Very stripped back, basic paginator
 * BREADCRUMB..........Simple breadcrumb trail object
 * MEDIA...............Media object
 * MARGINALIA..........Simple marginalia content
 * ISLAND..............Boxed off content
 * BLOCK-LIST..........Blocky lists of content
 * MATRIX..............Gridded lists
 * SPLIT...............A simple split-in-two object
 * THIS-OR-THIS........Options object
 * LINK-COMPLEX........
 * FLYOUT..............Flyout-on-hover object
 * ARROWS..............CSS arrows
 * SPRITE..............Generic spriting element
 * ICON-TEXT...........Icon and text couplings
 * BEAUTONS............Use the beautons micro library
 * LOZENGES............Basic lozenge styles
 * RULES...............Horizontal rules
 * STATS...............Simple stats object
 * GREYBOX.............Wireframing styles
 *
 * WIDTHS..............Width classes for use alongside the grid system etc.
 * PUSH................Push classes for manipulating grids
 * PULL................Pull classes for manipulating grids
 * BRAND...............Helper class to apply brand treatment to elements
 * HELPER..............A series of helper classes to use arbitrarily
 * DEBUG...............Enable to add visual flags for debugging purposes
 */
/*------------------------------------*\
    $WARNING
\*------------------------------------*/
/*
 * inuit.css, being an OO framework, works in keeping with the open/closed
 * principle. The variables you set previously are now being used throughout
 * inuit.css to style everything we need for a base. Any custom styles SHOULD
 * NOT be added or modified in inuit.css directly, but added via your theme
 * stylesheet as per the open/closed principle:
 *
 * csswizardry.com/2012/06/the-open-closed-principle-applied-to-css
 *
 * Try not to edit any CSS beyond this point; if you find you need to do so
 * it is a failing of the framework so please tweet at @inuitcss.
 */
/*------------------------------------*\
    $IMPORTS
\*------------------------------------*/
/**
 * Generic utility styles etc.
 */
/*------------------------------------*\
    $DEFAULTS
\*------------------------------------*/
/**
 * inuit.css’ default variables. Redefine these in your `_vars.scss` file (found
 * in the inuit.css-web-template) to override them.
 */
/*------------------------------------*\
    $DEBUG
\*------------------------------------*/
/**
 * Debug mode will visually highlight any potential markup/accessibility quirks
 * in the browser. Set to `true` or `false`.
 */
/*------------------------------------*\
    $BORDER-BOX
\*------------------------------------*/
/**
 * Do you want all elements to adopt `box-sizing:border-box;` as per
 * paulirish.com/2012/box-sizing-border-box-ftw ?
 */
/*------------------------------------*\
    $BASE
\*------------------------------------*/
/**
 * Base stuff
 */
/**
 * Base font-family.
 */
/**
 * Default colour for objects’ borders etc.
 */
/*------------------------------------*\
    $RESPONSIVE
\*------------------------------------*/
/**
 * Responsiveness?
 */
/**
 * Responsiveness for widescreen/high resolution desktop monitors and beyond?
 * Note: `$responsive` variable above must be set to true before enabling this.
 */
/**
 * Responsive push and pull produce a LOT of code, only turn them on if you
 * definitely need them.
 */
/**
 * Note: `$push` variable above must be set to true before enabling these.
 */
/**
 * Note: `$pull` variable above must be set to true before enabling these.
 */
/**
 * Tell inuit.css when breakpoints start.
 */
/*------------------------------------*\
    $FONT-SIZES
\*------------------------------------*/
/**
 * Font-sizes (in pixels). Refer to relevant sections for their implementations.
 */
/*------------------------------------*\
    $QUOTES
\*------------------------------------*/
/**
 * English quote marks?
 */
/**
 * If you want English quotes then please do not edit these; they’re only here
 * because Sass needs them.
 */
/**
 * If you need non-English quotes, please alter the following values accordingly:
 */
/*------------------------------------*\
    $BRAND
\*------------------------------------*/
/**
 * Brand stuff
 */
/**
 * How big would you like round corners to be by default?
 */
/*------------------------------------*\
    $OBJECTS AND ABSTRACTIONS
\*------------------------------------*/
/**
 * Which objects and abstractions would you like to use?
 */
/*------------------------------------*\
    $FRAMEWORK
\*------------------------------------*/
/**
 * inuit.css will work these next ones out for use within the framework.
 *
 * Assign our `$base-line-height` to a new spacing var for more transparency.
 */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
/**
 * Style any number of headings in one fell swoop, e.g.:
 *
   .foo{
       @include headings(1, 3){
           color:#BADA55;
       }
    }
 *
 * With thanks to @lar_zzz, @paranoida, @rowanmanning and ultimately
 * @thierrylemoulec for refining and improving my initial mixin.
 */
/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 *
   .foo{
       @include vendor(animation, shrink 3s);
   }

   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 *
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
/**
 * Force overly long spans of text to truncate, e.g.:
 *
   `@include truncate(100%);`
 *
 * Where `$truncation-boundary` is a united measurement.
 */
/**
 * CSS arrows!!! But... before you read on, you might want to grab a coffee...
 *
 * This mixin creates a CSS arrow on a given element. We can have the arrow
 * appear in one of 12 locations, thus:
 *
 *       01    02    03
 *    +------------------+
 * 12 |                  | 04
 *    |                  |
 * 11 |                  | 05
 *    |                  |
 * 10 |                  | 06
 *    +------------------+
 *       09    08    07
 *
 * You pass this position in along with a desired arrow color and optional
 * border color, for example:
 *
 * `@include arrow(top, left, red)`
 *
 * for just a single, red arrow, or:
 *
 * `@include arrow(bottom, center, red, black)`
 *
 * which will create a red triangle with a black border which sits at the bottom
 * center of the element. Call the mixin thus:
 *
   .foo{
       background-color:#BADA55;
       border:1px solid #ACE;
       @include arrow(top, left, #BADA55, #ACE);
   }
 *
 */
/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * lap-and-up
 * portable
 * desk
 * desk-wide
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include media-query(palm){ [styles here] }`
 *
 * We work out your end points for you:
 */
/*! normalize.css v2.1.0 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/*
 * Correct `block` display not defined in IE 8/9.
 */
article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary {
  display: block; }

/*
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio, canvas, video {
  display: inline-block; }

/*
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/*
 * Address styling not present in IE 8/9.
 */
[hidden] {
  display: none; }

/* ==========================================================================
   Base
   ========================================================================== */
/*
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -ms-text-size-adjust: 100%;
  /* 2 */ }

/*
 * Remove default margin.
 */
body {
  margin: 0; }

/* ==========================================================================
   Links
   ========================================================================== */
/*
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted; }

/*
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active, a:hover {
  outline: 0; }

/* ==========================================================================
   Typography
   ========================================================================== */
/*
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/*
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/*
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b, strong {
  font-weight: bold; }

/*
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic; }

/*
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0; }

/*
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/*
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code, kbd, pre, samp {
  font-family: monospace, serif;
  font-size: 1em; }

/*
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre-wrap; }

/*
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019"; }

/*
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/*
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* ==========================================================================
   Embedded content
   ========================================================================== */
/*
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0; }

/*
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden; }

/* ==========================================================================
   Figures
   ========================================================================== */
/*
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0; }

/* ==========================================================================
   Forms
   ========================================================================== */
/*
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/*
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/*
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button, input, select, textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */ }

/*
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button, input {
  line-height: normal; }

/*
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button, select {
  text-transform: none; }

/*
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/*
 * Re-set default cursor for disabled elements.
 */
button[disabled], html input[disabled] {
  cursor: default; }

/*
 * 1. Address box sizing set to `content-box` in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 */
input[type="checkbox"], input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/*
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/*
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/*
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/*
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */ }

/* ==========================================================================
   Tables
   ========================================================================== */
/*
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

/*------------------------------------*\
    $RESET
\*------------------------------------*/
/**
 * A more considered reset; more of a restart...
 * As per: csswizardry.com/2011/10/reset-restarted
 */
/**
    * Let’s make the box model all nice, shall we...?
    */
*, *:before, *:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  -ms-box-sizing: border-box;
  -o-box-sizing: border-box;
  box-sizing: border-box; }

/**
 * The usual...
 */
h1, h2, h3, h4, h5, h6, p, blockquote, pre, dl, dd, ol, ul, form, fieldset, legend, table, th, td, caption, hr {
  margin: 0;
  padding: 0; }

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title], dfn[title] {
  cursor: help; }

/**
 * Remove underlines from potentially troublesome elements.
 */
u, ins {
  text-decoration: none; }

/**
 * Apply faux underline via `border-bottom`.
 */
ins {
  border-bottom: 1px solid; }

/**
 * So that `alt` text is visually offset if images don’t load.
 */
img {
  font-style: italic; }

/**
 * Give form elements some cursor interactions...
 */
label, input, textarea, button, select, option {
  cursor: pointer; }

.text-input:active, .text-input:focus, textarea:active, textarea:focus {
  cursor: text;
  outline: none; }

/*------------------------------------*\
    $CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * Extend the clearfix class with Sass to avoid the `.cf` class appearing over
 * and over in your markup.
 */
.cf:after, .nav:after, .page-numbers:after, .nav--social-bar:after, .island--social .nav--social:after, .alert .nav--social:after, .media:after, .matrix:after, .multi-list:after {
  content: "";
  display: table;
  clear: both; }

/*------------------------------------*\
    $SHARED
\*------------------------------------*/
/**
 * Where `margin-bottom` is concerned, this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 */
/**
 * Base elements
 */
.form-fields > li {
  margin-bottom: 24px;
  margin-bottom: 1.5rem; }
  .islet .form-fields > li {
    margin-bottom: 12px;
    margin-bottom: 0.75rem; }

/**
 * Doubled up `margin-bottom` helper class.
 */
.landmark {
  margin-bottom: 48px;
  margin-bottom: 3rem; }

/**
 * `hr` elements only take up a few pixels, so we need to give them special
 * treatment regarding vertical rhythm.
 */
hr {
  margin-bottom: 22px;
  margin-bottom: 1.375rem; }

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once, here.
 */
ul, ol, dd {
  margin-left: 48px;
  margin-left: 3rem; }

/**
 * Base styles; unclassed HTML elements etc.
 */
/*------------------------------------*\
    $MAIN
\*------------------------------------*/
html {
  font: 1em/1.5 "Gotham SSm A", "Gotham SSm B", sans-serif;
  overflow-y: scroll;
  min-height: 100%; }

/*------------------------------------*\
    $HEADINGS
\*------------------------------------*/
/**
 * As per: csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css
 *
 * When we define a heading we also define a corresponding class to go with it.
 * This allows us to apply, say, `class=alpha` to a `h3`; a double-stranded
 * heading hierarchy.
 */
h1, .alpha {
  font-size: 60px;
  font-size: 3.75rem;
  line-height: 1.2; }

h2, .beta {
  font-size: 28px;
  font-size: 1.75rem;
  line-height: 1.71429; }

h3, .gamma {
  font-size: 22px;
  font-size: 1.375rem;
  line-height: 1.09091; }

h4, .delta {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }

h5, .epsilon, .nav__label {
  font-size: 11px;
  font-size: 0.6875rem;
  line-height: 2.18182; }

h6, .zeta {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5; }

/**
 * Heading groups and generic any-heading class.
 * To target any heading of any level simply apply a class of `.hN`, e.g.:
 *
   <hgroup>
       <h1 class=hN>inuit.css</h1>
       <h2 class=hN>Best. Framework. Ever!</h2>
   </hgroup>
 *
 */

hgroup .hN {
  margin-bottom: 0; }

/**
 * A series of classes for setting massive type; for use in heroes, mastheads,
 * promos, etc.
 */
.giga {
  font-size: 65px;
  font-size: 4.0625rem;
  line-height: 1.10769; }

.mega {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.33333; }

.kilo {
  font-size: 48px;
  font-size: 3rem;
  line-height: 1; }

/*------------------------------------*\
    $PARAGRAPHS
\*------------------------------------*/
/**
 * The `.lede` class is used to make the introductory text (usually a paragraph)
 * of a document slightly larger.
 */
.lede, .lead, p.leader {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333; }

/*------------------------------------*\
    $SMALLPRINT
\*------------------------------------*/
/**
 * A series of classes for setting tiny type; for use in smallprint etc.
 */
.smallprint, .milli {
  font-size: 13px;
  font-size: 0.8125rem;
  line-height: 1.84615; }

.micro {
  font-size: 10px;
  font-size: 0.625rem;
  line-height: 2.4; }

/*------------------------------------*\
    $QUOTES
\*------------------------------------*/
/**
 * If English quotes are set in `_vars.scss`, define them here.
 */
/**
 * Big up @boblet: html5doctor.com/blockquote-q-cite
 */
/**
 * Inline quotes.
 */
q {
  quotes: "\2018" "\2019" "\201C" "\201D"; }
  q:before {
    content: "\2018";
    content: open-quote; }
  q:after {
    content: "\2019";
    content: close-quote; }
  q q:before {
    content: "\201C";
    content: open-quote; }
  q q:after {
    content: "\201D";
    content: close-quote; }

blockquote {
  quotes: "\201C" "\201D"; }
  blockquote p:before {
    content: "\201C";
    content: open-quote; }
  blockquote p:after {
    content: "";
    content: no-close-quote; }
  blockquote p:last-of-type:after {
    content: "\201D";
    content: close-quote; }
  blockquote q:before {
    content: "\2018";
    content: open-quote; }
  blockquote q:after {
    content: "\2019";
    content: close-quote; }

/**
 *
   <blockquote>
       <p>Insanity: doing the same thing over and over again and expecting
       different results.</p>
       <b class=source>Albert Einstein</b>
   </blockquote>
 *
 */
blockquote {
  /**
     * .4em is roughly equal to the width of the opening “ that we wish to hang.
     */
  text-indent: -0.41em; }
  blockquote p:last-of-type {
    margin-bottom: 0; }

.source {
  display: block;
  text-indent: 0; }
  .source:before {
    content: "\2014"; }

/*------------------------------------*\
    $CODE
\*------------------------------------*/
/**
 * Use an explicit font stack to ensure browsers render correct `line-height`.
 */
pre {
  overflow: auto; }

pre mark {
  background: none;
  border-bottom: 1px solid;
  color: inherit; }

/**
 * Add comments to your code examples, e.g.:
 *
   <code>&lt;/div&gt;<span class=code-comment>&lt;!-- /wrapper --&gt;</span></code>
 *
 */
.code-comment {
  /**
     * Override this setting in your theme stylesheet
     */
  opacity: 0.75;
  filter: alpha(opacity=75); }

/**
 * You can add line numbers to your code examples but be warned, it requires
 * some pretty funky looking markup, e.g.:
 *
   <ol class=line-numbers>
       <li><code>.nav{</code></li>
       <li><code>    list-style:none;</code></li>
       <li><code>    margin-left:0;</code></li>
       <li><code>}</code></li>
       <li><code>    .nav > li,</code></li>
       <li><code>        .nav > li > a{</code></li>
       <li><code>            display:inline-block;</code></li>
       <li><code>           *display:inline-block;</code></li>
       <li><code>            zoom:1;</code></li>
       <li><code>        }</code></li>
   </ol>
 *
 * 1. Make the list look like code.
 * 2. Give the list flush numbers with a leading zero.
 * 3. Make sure lines of code don’t wrap.
 * 4. Give the code form by forcing the `code` to honour white-space.
 */
.line-numbers {
  font-family: monospace, serif;
  /* [1] */
  list-style: decimal-leading-zero inside;
  /* [2] */
  white-space: nowrap;
  /* [3] */
  overflow: auto;
  /* [3] */
  margin-left: 0; }

.line-numbers code {
  white-space: pre;
  /* [4] */ }

/*------------------------------------*\
    $IMAGES
\*------------------------------------*/
/**
 * Demo: jsfiddle.net/inuitcss/yMtur
 */
/**
 * Fluid images.
 */
img {
  max-width: 100%; }

/**
 * Non-fluid images if you specify `width` and/or `height` attributes.
 */
img[width], img[height] {
  max-width: none; }

/**
 * Rounded images.
 */
.img--round {
  border-radius: 3px; }

/**
 * Image placement variations.
 */
.img--right {
  float: right;
  margin-bottom: 24px;
  margin-left: 24px; }

.img--left {
  float: left;
  margin-right: 24px;
  margin-bottom: 24px; }

.img--center {
  display: block;
  margin-right: auto;
  margin-bottom: 24px;
  margin-left: auto; }

/**
 * Keep your images on your baseline.
 *
 * Please note, these will not work too nicely with fluid images and will
 * distort when resized below a certain width. Use with caution.
 */
.img--short {
  height: 120px; }

.img--medium {
  height: 240px; }

.img--tall {
  height: 360px; }

/**
 * Images in `figure` elements.
 */
figure > img {
  display: block; }

/*------------------------------------*\
    $LISTS
\*------------------------------------*/
/**
 * Remove vertical spacing from nested lists.
 */
li > ul, li > ol {
  margin-bottom: 0; }

/**
 * Have a numbered `ul` without the semantics implied by using an `ol`.
 */
/*ul*/
.numbered-list {
  list-style-type: decimal; }

/*------------------------------------*\
    $TABLES
\*------------------------------------*/
/**
 * We have a lot at our disposal for making very complex table constructs, e.g.:
 *
   <table class="table--bordered  table--striped  table--data">
       <colgroup>
           <col class=t10>
           <col class=t10>
           <col class=t10>
           <col>
       </colgroup>
       <thead>
           <tr>
               <th colspan=3>Foo</th>
               <th>Bar</th>
           </tr>
           <tr>
               <th>Lorem</th>
               <th>Ipsum</th>
               <th class=numerical>Dolor</th>
               <th>Sit</th>
           </tr>
       </thead>
       <tbody>
           <tr>
               <th rowspan=3>Sit</th>
               <td>Dolor</td>
               <td class=numerical>03.788</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>32.210</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>47.797</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <th rowspan=2>Sit</th>
               <td>Dolor</td>
               <td class=numerical>09.640</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>12.117</td>
               <td>Lorem</td>
           </tr>
       </tbody>
   </table>
 *
 */
table {
  width: 100%; }

th, td {
  padding: 6px;
  text-align: left; }
  @media screen and (min-width: 480px) {
    th, td {
      padding: 12px; } }

/**
 * Cell alignments
 */
[colspan] {
  text-align: center; }

[colspan="1"] {
  text-align: left; }

[rowspan] {
  vertical-align: middle; }

[rowspan="1"] {
  vertical-align: top; }

.numerical {
  text-align: right; }

/**
 * In the HTML above we see several `col` elements with classes whose numbers
 * represent a percentage width for that column. We leave one column free of a
 * class so that column can soak up the effects of any accidental breakage in
 * the table.
 */
.t5 {
  width: 5%; }

.t10 {
  width: 10%; }

.t12 {
  width: 12.5%; }

/* 1/8 */
.t15 {
  width: 15%; }

.t20 {
  width: 20%; }

.t25 {
  width: 25%; }

/* 1/4 */
.t30 {
  width: 30%; }

.t33 {
  width: 33.333%; }

/* 1/3 */
.t35 {
  width: 35%; }

.t37 {
  width: 37.5%; }

/* 3/8 */
.t40 {
  width: 40%; }

.t45 {
  width: 45%; }

.t50 {
  width: 50%; }

/* 1/2 */
.t55 {
  width: 55%; }

.t60 {
  width: 60%; }

.t62 {
  width: 62.5%; }

/* 5/8 */
.t65 {
  width: 65%; }

.t66 {
  width: 66.666%; }

/* 2/3 */
.t70 {
  width: 70%; }

.t75 {
  width: 75%; }

/* 3/4*/
.t80 {
  width: 80%; }

.t85 {
  width: 85%; }

.t87 {
  width: 87.5%; }

/* 7/8 */
.t90 {
  width: 90%; }

.t95 {
  width: 95%; }

/**
 * Bordered tables
 */
.table--bordered th, .table--bordered td {
  border: 1px solid #ccc; }
  .table--bordered th:empty, .table--bordered td:empty {
    border: none; }
.table--bordered thead tr:last-child th {
  border-bottom-width: 2px; }
.table--bordered tbody tr th:last-of-type {
  border-right-width: 2px; }

/**
 * Striped tables
 */
.table--striped tbody tr:nth-of-type(odd) {
  background-color: #ffc;
  /* Override this color in your theme stylesheet */ }

/**
 * Data table
 */
.table--data {
  font: 12px/1.5 sans-serif; }

/*------------------------------------*\
    $FORMS
\*------------------------------------*/
/**
 *
 * Demo: jsfiddle.net/inuitcss/MhHHU
 *
 */
fieldset {
  padding: 24px; }

/**
 * Text inputs
 *
 * Instead of a `[type]` selector for each kind of form input, we just use a
 * class to target any/every one, e.g.:
   <input type=text class=text-input>
   <input type=email class=text-input>
   <input type=password class=text-input>
 *
 */

/**
 * Group sets of form fields in a list, e.g.:
 *
   <ul class=form-fields>
       <li>
           <label />
           <input />
       </li>
       <li>
           <label />
           <select />
       </li>
       <li>
           <label />
           <input />
       </li>
   </ul>
 *
 */
.form-fields {
  list-style: none;
  margin: 0; }


.form-fields > li:last-child {
  margin-bottom: 0; }

/**
 * Labels
 *
 * Define a `.label` class as well as a `label` element. This means we can apply
 * label-like styling to meta-labels for groups of options where a `label`
 * element is not suitable, e.g.:
 *
   <li>
       <span class=label>Select an option below:</span>
       <ul class="multi-list  four-cols">
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 *
 */
label, .label {
  display: block; }

/**
     * Extra help text in `label`s, e.g.:
     *
       <label>Card number <small class=additional>No spaces</small></label>
     *
     */
.additional {
  display: block;
  font-weight: normal; }

/*
 * Groups of checkboxes and radios, e.g.:
 *
   <li>
       <ul class=check-list>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 *
 */
.check-list {
  list-style: none;
  margin: 0; }

/*
     * Labels in check-lists
     */
.check-label, .check-list label, .check-list .label {
  display: inline-block; }

/**
 * Spoken forms are for forms that read like spoken word, e.g.:
 *
   <li class=spoken-form>
       Hello, my <label for=spoken-name>name</label> is
       <input type=text class=text-input id=spoken-name>. My home
       <label for=country>country</label> is
       <select id=country>
           <option>UK</option>
           <option>US</option>
           <option>Other</option>
       </select>
   </li>
 *
 */
.spoken-form label {
  display: inline-block;
  font: inherit; }

/**
 * Extra help text displayed after a field when that field is in focus, e.g.:
 *
   <label for=email>Email:</label>
   <input type=email class=text-input id=email>
   <small class=extra-help>.edu emails only</small>
 *
 * We leave the help text in the document flow and merely set it to
 * `visibility:hidden;`. This means that it won’t interfere with anything once
 * it reappears.
 *
 */
/*small*/
.extra-help {
  display: inline-block;
  visibility: hidden; }

.text-input:active + .extra-help, .text-input:focus + .extra-help {
  visibility: visible; }

/**
 * Objects and abstractions
 */
/*------------------------------------*\
    $GRIDS
\*------------------------------------*/
/**
 * Fluid and nestable grid system, e.g.:
 *
   <div class="grid">

       <div class="grid__item  one-third">
           <p>One third grid</p>
       </div><!--

    --><div class="grid__item  two-thirds">
           <p>Two thirds grid</p>
       </div><!--

    --><div class="grid__item  one-half">
           <p>One half grid</p>
       </div><!--

    --><div class="grid__item  one-quarter">
           <p>One quarter grid</p>
       </div><!--

    --><div class="grid__item  one-quarter">
           <p>One quarter grid</p>
       </div>

   </div>
 *
 * Demo: jsfiddle.net/inuitcss/CLYUC
 *
 */
/**
 * Grid wrapper
 */
.grid {
  margin-left: -24px;
  list-style: none;
  margin-bottom: 0; }

/**
     * Very infrequently occuring grid wrappers as children of grid wrappers.
     */
.grid > .grid {
  margin-left: 0; }

/**
     * Grid
     */
.grid__item {
  display: inline-block;
  width: 100%;
  padding-left: 24px;
  vertical-align: top; }

/*------------------------------------*\
    $NAV
\*------------------------------------*/
/**
 * Nav abstraction as per: csswizardry.com/2011/09/the-nav-abstraction
 * When used on an `ol` or `ul`, this class throws the list into horizontal mode
 * e.g.:
 *
   <ul class=nav>
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 * Demo: jsfiddle.net/inuitcss/Vnph4
 *
 */
.nav, .page-numbers, .nav--social-bar, .island--social .nav--social, .alert .nav--social {
  list-style: none;
  margin-left: 0; }
  .nav > li, .nav > .page-numbers, .nav > .nav--social-bar, .nav > .island--social .nav--social, .island--social .nav > .nav--social, .nav > .alert .nav--social, .alert .nav > .nav--social, .nav > li > a, .nav > li > .page-numbers, .nav > li > .nav--social-bar, .nav > li > .island--social .nav--social, .island--social .nav > li > .nav--social, .nav > li > .alert .nav--social, .alert .nav > li > .nav--social {
    display: inline-block;
    *display: inline;
    zoom: 1; }

/**
 * `.nav--stacked` extends `.nav` and throws the list into vertical mode, e.g.:
 *
   <ul class="nav  nav--stacked">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.nav--stacked > li {
  display: list-item; }
  .nav--stacked > li > a {
    display: block; }

/**
 * `.nav--banner` extends `.nav` and centres the list, e.g.:
 *
   <ul class="nav  nav--banner">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.nav--banner {
  text-align: center; }

/**
 * Give nav links a big, blocky hit area. Extends `.nav`, e.g.:
 *
   <ul class="nav  nav--block">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.nav--block {
  line-height: 1;
  /**
     * Remove whitespace caused by `inline-block`.
     */
  letter-spacing: -0.31em;
  word-spacing: -0.43em;
  white-space: nowrap; }
  .nav--block > li {
    letter-spacing: normal;
    word-spacing: normal; }
    .nav--block > li > a {
      padding: 12px; }

/**
 * Force a nav to occupy 100% of the available width of its parent. Extends
 * `.nav`, e.g.:
 *
   <ul class="nav  nav--fit">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 * Thanks to @pimpl for this idea!
 */
.nav--fit {
  display: table;
  width: 100%; }
  .nav--fit > li {
    display: table-cell; }
    .nav--fit > li > a {
      display: block; }

/**
 * Make a list of keywords. Extends `.nav`, e.g.:
 *
   `<ul class="nav  nav--keywords>`
 *
 */
.nav--keywords > li:after {
  content: "\002C" "\00A0"; }
.nav--keywords > li:last-child:after {
  display: none; }

/*------------------------------------*\
    $PAGINATION
\*------------------------------------*/
/**
 * Basic pagination object, extends `.nav`.
 * Requires some funky commenting to collapse any white-space caused by the
 * `display:inline-block;` rules.
 *
   <ol class="nav  pagination">
       <li class=pagination__first>First</li>
       <li class=pagination__prev>Previous</li>
       <li><a href=/page/1>1</a></li>
       <li><a href=/page/2>2</a></li>
       <li class=current><a href=/page/3>3</a></li>
       <li><a href=/page/4>4</a></li>
       <li><a href=/page/5>5</a></li>
       <li class=pagination__next><a href=/page/next>Next</a></li>
       <li class=pagination__last><a href=/page/last>Last</a></li>
   </ol>
 *
 * Demo: jsfiddle.net/inuitcss/9Y6PU
 *
 */
.pagination {
  text-align: center;
  /**
     * Remove whitespace caused by `inline-block`.
     */
  letter-spacing: -0.31em;
  word-spacing: -0.43em; }

.pagination > li {
  padding: 12px;
  letter-spacing: normal;
  word-spacing: normal; }

.pagination > li > a {
  padding: 12px;
  margin: -12px; }

.pagination__first a:before {
  content: "\00AB" "\00A0"; }

.pagination__last a:after {
  content: "\00A0" "\00BB"; }

/*------------------------------------*\
    $MEDIA
\*------------------------------------*/
/**
 * Place any image- and text-like content side-by-side, as per:
 * stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code
 * E.g.:
 *
   <div class=media>
       <img src=http://placekitten.com/200/300 alt="" class=media__img>
       <p class=media__body>Lorem ipsum dolor sit amet, consectetur adipisicing elit,
       sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
   </div>
 *
 * Demo: jsfiddle.net/inuitcss/cf4Qs
 *
 */
.media {
  display: block; }

.media__img {
  float: left;
  margin-right: 24px; }

/**
     * Reversed image location (right instead of left).
     */
.media__img--rev {
  float: right;
  margin-left: 24px; }

.media__img img, .media__img--rev img {
  display: block; }

.media__body {
  overflow: hidden; }

.media__body, .media__body > :last-child {
  margin-bottom: 0; }

/**
     * `.img`s in `.islet`s need an appropriately sized margin.
     */
.islet .media__img {
  margin-right: 12px; }

.islet .media__img--rev {
  margin-left: 12px; }

/*------------------------------------*\
    $BLOCK-LIST
\*------------------------------------*/
/**
 * Create big blocky lists of content, e.g.:
 *
   <ul class=block-list>
      <li>Foo</li>
      <li>Bar</li>
      <li>Baz</li>
      <li><a href=# class=block-list__link>Foo Bar Baz</a></li>
   </ul>
 *
 * Extend this object in your theme stylesheet.
 *
 * Demo: jsfiddle.net/inuitcss/hR57q
 *
 */
.block-list, .matrix, .block-list > li, .block-list > .matrix {
  border: 0 solid #ccc; }

.block-list, .matrix {
  list-style: none;
  margin-left: 0;
  border-top-width: 1px; }
  .block-list > li, .block-list > .matrix {
    border-bottom-width: 1px;
    padding: 12px; }

.block-list__link, .matrix__link {
  display: block;
  padding: 12px;
  margin: -12px; }

/*------------------------------------*\
    $MATRIX
\*------------------------------------*/
/**
 * Create a grid of items out of a single list, e.g.:
 *
   <ul class="matrix  three-cols">
       <li class=all-cols>Lorem</li>
       <li>Ipsum <a href=#>dolor</a></li>
       <li><a href=# class=matrix__link>Sit</a></li>
       <li>Amet</li>
       <li class=all-cols>Consectetuer</li>
   </ul>
 *
 * Extend this object in your theme stylesheet.
 *
 * Demo: jsfiddle.net/inuitcss/Y2zrU
 *
 */
.matrix {
  border-left-width: 1px; }
  .matrix > li {
    float: left;
    border-right-width: 1px; }


/**
 * The `.multi-list` object is a lot like the `.matrix` object only without the
 * blocky borders and padding.
 *
   <ul class="multi-list  four-cols">
       <li>Lorem</li>
       <li>Ipsum</li>
       <li>Dolor</li>
       <li>Sit</li>
   </ul>
 *
 * Demo: jsfiddle.net/inuitcss/Y2zrU
 *
 */
.multi-list {
  list-style: none;
  margin-left: 0; }

.multi-list > li {
  float: left; }

/**
     * Apply these classes alongside the `.matrix` or `.multi-list` classes on
     * lists to determine how wide their columns are.
     */
.two-cols > li {
  width: 50%; }

.three-cols > li {
  width: 33.333%; }

.four-cols > li {
  width: 25%; }

.five-cols > li {
  width: 20%; }

/**
     * Unfortunately we have to qualify this selector in order to bring its
     * specificity above the `.[number]-cols > li` selectors above.
     */
.matrix > .all-cols, .multi-list > .all-cols {
  width: 100%; }

/*------------------------------------*\
    $ARROWS
\*------------------------------------*/
/**
 * It is a common design treatment to give an element a triangular points-out
 * arrow, we typically build these with CSS. These following classes allow us to
 * generate these arbitrarily with a mixin, `@arrow()`.
 */
/**
 * Forms the basis for any/all CSS arrows.
 */
.island--navigation--complex .navigation__item, .navigation--group .navigation__item, .island--navigation--complex .navigation__item, .navigation--group .navigation__item {
  position: relative; }
  .island--navigation--complex .navigation__item:before, .navigation--group .navigation__item:before, .island--navigation--complex .navigation__item:before, .navigation--group .navigation__item:before, .island--navigation--complex .navigation__item:after, .navigation--group .navigation__item:after, .island--navigation--complex .navigation__item:after, .navigation--group .navigation__item:after {
    content: "";
    position: absolute;
    border-collapse: separate; }
  .island--navigation--complex .navigation__item:before, .navigation--group .navigation__item:before, .island--navigation--complex .navigation__item:before, .navigation--group .navigation__item:before {
    border: 12px solid transparent; }
  .island--navigation--complex .navigation__item:after, .navigation--group .navigation__item:after, .island--navigation--complex .navigation__item:after, .navigation--group .navigation__item:after {
    border: 11px solid transparent; }

/**
 * Define individual edges so we can combine what we need, when we need.
 */
.island--navigation--complex .navigation__item:before, .island--navigation--complex .navigation__item:after {
  bottom: 100%; }




.navigation--group .navigation__item:before, .navigation--group .navigation__item:after {
  top: 100%; }



.island--navigation--complex .navigation__item:before, .navigation--group .navigation__item:before, .island--navigation--complex .navigation__item:after, .navigation--group .navigation__item:after {
  left: 50%;
  margin-left: -12px; }
.island--navigation--complex .navigation__item:after, .navigation--group .navigation__item:after {
  margin-left: -11px; }



/*------------------------------------*\
    $BEAUTONS.CSS
\*------------------------------------*/
/**
 * beautons is a beautifully simple button toolkit.
 *
 * LICENSE
 * 
 * Copyright 2013 Harry Roberts
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
/*!*
 * 
 * @csswizardry -- csswizardry.com/beautons
 * 
 */
/*------------------------------------*\
    $BASE
\*------------------------------------*/
/**
 * Base button styles.
 *
 * 1. Allow us to better style box model properties.
 * 2. Line different sized buttons up a little nicer.
 * 3. Stop buttons wrapping and looking broken.
 * 4. Make buttons inherit font styles.
 * 5. Force all elements using beautons to appear clickable.
 * 6. Normalise box model styles.
 * 7. If the button’s text is 1em, and the button is (3 * font-size) tall, then
 *    there is 1em of space above and below that text. We therefore apply 1em
 *    of space to the left and right, as padding, to keep consistent spacing.
 * 8. Basic cosmetics for default buttons. Change or override at will.
 * 9. Don’t allow buttons to have underlines; it kinda ruins the illusion.
 */
.btn, .nav--global .menu-item-88 a, .nav--global .button a, .nav--btn--secondary li a, .nav--btn--secondary li a, .nav--btn--tertiary li a, .nav--social-bar, .island--social .nav--social, .alert .nav--social, .page-numbers li a, .page-numbers li span {
  display: inline-block;
  /* [1] */
  vertical-align: middle;
  /* [2] */
  white-space: nowrap;
  /* [3] */
  font-family: inherit;
  /* [4] */
  font-size: 100%;
  /* [4] */
  cursor: pointer;
  /* [5] */
  border: none;
  /* [6] */
  margin: 0;
  /* [6] */
  padding-top: 0;
  /* [6] */
  padding-bottom: 0;
  /* [6] */
  line-height: 3;
  /* [7] */
  padding-right: 1em;
  /* [7] */
  padding-left: 1em;
  /* [7] */
  border-radius: 3px;
  /* [8] */ }

.btn, .nav--global .menu-item-88 a, .nav--global .button a, .nav--btn--secondary li a, .nav--btn--secondary li a, .nav--btn--tertiary li a, .nav--social-bar, .island--social .nav--social, .alert .nav--social, .page-numbers li a, .page-numbers li span, .btn:hover, .nav--global .menu-item-88 a:hover, .nav--global .button a:hover, .nav--btn--secondary li a:hover, .nav--btn--secondary li a:hover, .nav--btn--tertiary li a:hover, .nav--social-bar, .island--social .nav--social, .alert .nav--social, .page-numbers li a:hover, .page-numbers li span:hover {
  text-decoration: none;
  /* [9] */ }
.btn:active, .nav--global .menu-item-88 a:active, .nav--global .button a:active, .nav--btn--secondary li a:active, .nav--btn--secondary li a:active, .nav--btn--tertiary li a:active, .nav--social-bar, .island--social .nav--social, .alert .nav--social, .page-numbers li a:active, .page-numbers li span:active, .btn:focus, .nav--global .menu-item-88 a:focus, .nav--global .button a:focus, .nav--btn--secondary li a:focus, .nav--btn--secondary li a:focus, .nav--btn--tertiary li a:focus, .nav--social-bar, .island--social .nav--social, .alert .nav--social, .page-numbers li a:focus, .page-numbers li span:focus {
  outline: none; }

/*------------------------------------*\
    $SIZES
\*------------------------------------*/
/**
 * Button size modifiers.
 *
 * These all follow the same sizing rules as above; text is 1em, space around it
 * remains uniform.
 */
.btn--small {
  padding-right: 0.5em;
  padding-left: 0.5em;
  line-height: 2; }

.btn--large {
  padding-right: 1.5em;
  padding-left: 1.5em;
  line-height: 4; }

.btn--huge {
  padding-right: 2em;
  padding-left: 2em;
  line-height: 5; }

/**
 * These buttons will fill the entirety of their container.
 *
 * 1. Remove padding so that widths and paddings don’t conflict.
 */
.btn--full {
  width: 100%;
  padding-right: 0;
  /* [1] */
  padding-left: 0;
  /* [1] */
  text-align: center; }

/*------------------------------------*\
    $FONT-SIZES
\*------------------------------------*/
/**
 * Button font-size modifiers.
 */
.btn--alpha {
  font-size: 3rem; }

.btn--beta {
  font-size: 2rem; }

.btn--gamma {
  font-size: 1rem; }

/**
 * Make the button inherit sizing from its parent.
 */
.btn--natural {
  vertical-align: baseline;
  font-size: inherit;
  line-height: inherit;
  padding-right: 0.5em;
  padding-left: 0.5em; }

/*------------------------------------*\
    $FUNCTIONS
\*------------------------------------*/
/**
 * Button function modifiers.
 */



/**
 * Positive actions; e.g. sign in, purchase, submit, etc.
 */
.btn--positive {
  background-color: #4A993E;
  color: #fff; }

/**
 * Negative actions; e.g. close account, delete photo, remove friend, etc.
 */
.btn--negative {
  background-color: #b33630;
  color: #fff; }

/**
 * Inactive, disabled buttons.
 * 
 * 1. Make the button look like normal text when hovered.
 */
.btn--inactive, .btn:disabled, .nav--global .menu-item-88 a:disabled, .nav--global .button a:disabled, .nav--btn--secondary li a:disabled, .nav--btn--secondary li a:disabled, .nav--btn--tertiary li a:disabled, .nav--social-bar, .island--social .nav--social, .alert .nav--social, .page-numbers li a:disabled, .page-numbers li span:disabled, .page-numbers li .current, .btn--inactive:hover, .btn:hover:disabled, .nav--global .menu-item-88 a:hover:disabled, .nav--global .button a:hover:disabled, .nav--btn--secondary li a:hover:disabled, .nav--btn--secondary li a:hover:disabled, .nav--btn--tertiary li a:hover:disabled, .nav--social-bar, .island--social .nav--social, .alert .nav--social, .page-numbers li a:hover:disabled, .page-numbers li span:hover:disabled, .page-numbers li .current:hover, .btn--inactive:active, .btn:active:disabled, .nav--global .menu-item-88 a:active:disabled, .nav--global .button a:active:disabled, .nav--btn--secondary li a:active:disabled, .nav--btn--secondary li a:active:disabled, .nav--btn--tertiary li a:active:disabled, .nav--social-bar, .island--social .nav--social, .alert .nav--social, .page-numbers li a:active:disabled, .page-numbers li span:active:disabled, .page-numbers li .current:active, .btn--inactive:focus, .btn:focus:disabled, .nav--global .menu-item-88 a:focus:disabled, .nav--global .button a:focus:disabled, .nav--btn--secondary li a:focus:disabled, .nav--btn--secondary li a:focus:disabled, .nav--btn--tertiary li a:focus:disabled, .nav--social-bar, .island--social .nav--social, .alert .nav--social, .page-numbers li a:focus:disabled, .page-numbers li span:focus:disabled, .page-numbers li .current:focus {
  background-color: #ddd;
  color: #777;
  cursor: text;
  /* [1] */ }

/*------------------------------------*\
    $STYLES
\*------------------------------------*/
/**
 * Button style modifiers.
 *
 * 1. Use an overly-large number to ensure completely rounded, pill-like ends.
 */
.btn--soft {
  border-radius: 200px;
  /* [1] */ }

.btn--hard {
  border-radius: 0; }

/*------------------------------------*\
    $GREYBOX
\*------------------------------------*/
/**
 * Quickly throw together greybox wireframes. Use in conjunction with other
 * inuit.css objects to create simple greybox prototypes, e.g.:
 *
   <div class="island  greybox  greybox--medium">Header</div>

   <ul class="nav  nav--fit  nav--block  greybox">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 * The beauty of combining the greyboxing with inuit.css objects is that any
 * prototyping can quickly be converted into/used as production code.
 *
 * For a more complete prototyping framework, consider Adam Whitcroft’s Proto:
 * adamwhitcroft.com/proto
 *
 * Demo: jsfiddle.net/inuitcss/qCXfh/
 *
 */
.greybox, .graybox {
  font-size: 12px;
  font-size: 0.75rem;
  line-height: 2;
  font-family: sans-serif;
  text-align: center;
  background-color: rgba(0, 0, 0, 0.2);
  color: #fff; }

.greybox a, .graybox a {
  color: #fff;
  text-decoration: underline; }

/**
 * All greyboxes will occupy 100% of their parent’s width, but to alter their
 * heights we apply incrementally larger line-heights:
 */
.greybox--small, .graybox--small {
  line-height: 48px; }

.greybox--medium, .graybox--medium {
  line-height: 96px; }

.greybox--large, .graybox--large {
  line-height: 192px; }

.greybox--huge, .graybox--huge {
  line-height: 384px; }

.greybox--gigantic, .graybox--gigantic {
  line-height: 768px; }

/**
 * Style trumps; helper and brand classes
 */
/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * Sizes in human readable format. These are used in conjunction with other
 * objects and abstractions found in inuit.css, most commonly the grid system
 * and faux flexbox.
 *
 * We have a mixin to generate our widths and their breakpoint-specific
 * variations.
 */
/**
    * Whole
    */
.one-whole {
  width: 100%; }

/**
    * Halves
    */
.one-half, .two-quarters, .three-sixths, .four-eighths, .five-tenths, .six-twelfths {
  width: 50%; }

/**
    * Thirds
    */
.one-third, .two-sixths, .four-twelfths {
  width: 33.333%; }

.two-thirds, .four-sixths, .eight-twelfths {
  width: 66.666%; }

/**
    * Quarters
    */
.one-quarter, .two-eighths, .three-twelfths {
  width: 25%; }


.three-quarters, .six-eighths, .nine-twelfths {
  width: 75%; }

/**
    * Fifths
    */
.one-fifth, .two-tenths {
  width: 20%; }

.two-fifths, .four-tenths {
  width: 40%; }

.three-fifths, .six-tenths {
  width: 60%; }

.four-fifths, .eight-tenths {
  width: 80%; }

/**
    * Sixths
    */
.one-sixth, .two-twelfths {
  width: 16.666%; }




.five-sixths, .ten-twelfths {
  width: 83.333%; }

/**
    * Eighths
    */
.one-eighth {
  width: 12.5%; }


.three-eighths {
  width: 37.5%; }


.five-eighths {
  width: 62.5%; }


.seven-eighths {
  width: 87.5%; }

/**
    * Tenths
    */
.one-tenth {
  width: 10%; }


.three-tenths {
  width: 30%; }




.seven-tenths {
  width: 70%; }


.nine-tenths {
  width: 90%; }

/**
    * Twelfths
    */
.one-twelfth {
  width: 8.333%; }




.five-twelfths {
  width: 41.666%; }


.seven-twelfths {
  width: 58.333%; }




.eleven-twelfths {
  width: 91.666%; }

/**
 * If you have set `$responsive` to ‘true’ in `_vars.scss` then you now have
 * access to these classes. You can define at which breakpoint you’d like an
 * element to be a certain size, e.g.:
 *
 * `<div class="g  one-quarter  lap-one-half  palm-one-whole"> ... </div>`
 *
 * This would create a `div` that, at ‘desktop’ sizes, takes up a quarter of the
 * horizontal space, a half of that space at ‘tablet’ sizes, and goes full width
 * at ‘mobile’ sizes.
 *
 * Demo: jsfiddle.net/inuitcss/WS4Ge
 *
 */
@media only screen and (max-width: 739px) {
  /**
    * Whole
    */
  /**
    * Halves
    */
  /**
    * Thirds
    */
  /**
    * Quarters
    */
  /**
    * Fifths
    */
  /**
    * Sixths
    */
  /**
    * Eighths
    */
  /**
    * Tenths
    */
  /**
    * Twelfths
    */
  .palm-one-whole {
    width: 100%; }
  .palm-one-half, .palm-two-quarters, .palm-three-sixths, .palm-four-eighths, .palm-five-tenths, .palm-six-twelfths {
    width: 50%; }
  .palm-one-third, .palm-two-sixths, .palm-four-twelfths {
    width: 33.333%; }
  .palm-two-thirds, .palm-four-sixths, .palm-eight-twelfths {
    width: 66.666%; }
  .palm-one-quarter, .palm-two-eighths, .palm-three-twelfths {
    width: 25%; }
  .palm-three-quarters, .palm-six-eighths, .palm-nine-twelfths {
    width: 75%; }
  .palm-one-fifth, .palm-two-tenths {
    width: 20%; }
  .palm-two-fifths, .palm-four-tenths {
    width: 40%; }
  .palm-three-fifths, .palm-six-tenths {
    width: 60%; }
  .palm-four-fifths, .palm-eight-tenths {
    width: 80%; }
  .palm-one-sixth, .palm-two-twelfths {
    width: 16.666%; }
  .palm-five-sixths, .palm-ten-twelfths {
    width: 83.333%; }
  .palm-one-eighth {
    width: 12.5%; }
  .palm-three-eighths {
    width: 37.5%; }
  .palm-five-eighths {
    width: 62.5%; }
  .palm-seven-eighths {
    width: 87.5%; }
  .palm-one-tenth {
    width: 10%; }
  .palm-three-tenths {
    width: 30%; }
  .palm-seven-tenths {
    width: 70%; }
  .palm-nine-tenths {
    width: 90%; }
  .palm-one-twelfth {
    width: 8.333%; }
  .palm-five-twelfths {
    width: 41.666%; }
  .palm-seven-twelfths {
    width: 58.333%; }
  .palm-eleven-twelfths {
    width: 91.666%; } }

@media only screen and (min-width: 740px) and (max-width: 1099px) {
  /**
    * Whole
    */
  /**
    * Halves
    */
  /**
    * Thirds
    */
  /**
    * Quarters
    */
  /**
    * Fifths
    */
  /**
    * Sixths
    */
  /**
    * Eighths
    */
  /**
    * Tenths
    */
  /**
    * Twelfths
    */
  .lap-one-whole {
    width: 100%; }
  .lap-one-half, .lap-two-quarters, .lap-three-sixths, .lap-four-eighths, .lap-five-tenths, .lap-six-twelfths {
    width: 50%; }
  .lap-one-third, .lap-two-sixths, .lap-four-twelfths {
    width: 33.333%; }
  .lap-two-thirds, .lap-four-sixths, .lap-eight-twelfths {
    width: 66.666%; }
  .lap-one-quarter, .lap-two-eighths, .lap-three-twelfths {
    width: 25%; }
  .lap-three-quarters, .lap-six-eighths, .lap-nine-twelfths {
    width: 75%; }
  .lap-one-fifth, .lap-two-tenths {
    width: 20%; }
  .lap-two-fifths, .lap-four-tenths {
    width: 40%; }
  .lap-three-fifths, .lap-six-tenths {
    width: 60%; }
  .lap-four-fifths, .lap-eight-tenths {
    width: 80%; }
  .lap-one-sixth, .lap-two-twelfths {
    width: 16.666%; }
  .lap-five-sixths, .lap-ten-twelfths {
    width: 83.333%; }
  .lap-one-eighth {
    width: 12.5%; }
  .lap-three-eighths {
    width: 37.5%; }
  .lap-five-eighths {
    width: 62.5%; }
  .lap-seven-eighths {
    width: 87.5%; }
  .lap-one-tenth {
    width: 10%; }
  .lap-three-tenths {
    width: 30%; }
  .lap-seven-tenths {
    width: 70%; }
  .lap-nine-tenths {
    width: 90%; }
  .lap-one-twelfth {
    width: 8.333%; }
  .lap-five-twelfths {
    width: 41.666%; }
  .lap-seven-twelfths {
    width: 58.333%; }
  .lap-eleven-twelfths {
    width: 91.666%; } }

@media only screen and (min-width: 740px) {
  /**
    * Whole
    */
  /**
    * Halves
    */
  /**
    * Thirds
    */
  /**
    * Quarters
    */
  /**
    * Fifths
    */
  /**
    * Sixths
    */
  /**
    * Eighths
    */
  /**
    * Tenths
    */
  /**
    * Twelfths
    */
  .lap-and-up-one-whole {
    width: 100%; }
  .lap-and-up-one-half, .lap-and-up-two-quarters, .lap-and-up-three-sixths, .lap-and-up-four-eighths, .lap-and-up-five-tenths, .lap-and-up-six-twelfths {
    width: 50%; }
  .lap-and-up-one-third, .lap-and-up-two-sixths, .lap-and-up-four-twelfths {
    width: 33.333%; }
  .lap-and-up-two-thirds, .lap-and-up-four-sixths, .lap-and-up-eight-twelfths {
    width: 66.666%; }
  .lap-and-up-one-quarter, .lap-and-up-two-eighths, .lap-and-up-three-twelfths {
    width: 25%; }
  .lap-and-up-three-quarters, .lap-and-up-six-eighths, .lap-and-up-nine-twelfths {
    width: 75%; }
  .lap-and-up-one-fifth, .lap-and-up-two-tenths {
    width: 20%; }
  .lap-and-up-two-fifths, .lap-and-up-four-tenths {
    width: 40%; }
  .lap-and-up-three-fifths, .lap-and-up-six-tenths {
    width: 60%; }
  .lap-and-up-four-fifths, .lap-and-up-eight-tenths {
    width: 80%; }
  .lap-and-up-one-sixth, .lap-and-up-two-twelfths {
    width: 16.666%; }
  .lap-and-up-five-sixths, .lap-and-up-ten-twelfths {
    width: 83.333%; }
  .lap-and-up-one-eighth {
    width: 12.5%; }
  .lap-and-up-three-eighths {
    width: 37.5%; }
  .lap-and-up-five-eighths {
    width: 62.5%; }
  .lap-and-up-seven-eighths {
    width: 87.5%; }
  .lap-and-up-one-tenth {
    width: 10%; }
  .lap-and-up-three-tenths {
    width: 30%; }
  .lap-and-up-seven-tenths {
    width: 70%; }
  .lap-and-up-nine-tenths {
    width: 90%; }
  .lap-and-up-one-twelfth {
    width: 8.333%; }
  .lap-and-up-five-twelfths {
    width: 41.666%; }
  .lap-and-up-seven-twelfths {
    width: 58.333%; }
  .lap-and-up-eleven-twelfths {
    width: 91.666%; } }

@media only screen and (max-width: 1099px) {
  /**
    * Whole
    */
  /**
    * Halves
    */
  /**
    * Thirds
    */
  /**
    * Quarters
    */
  /**
    * Fifths
    */
  /**
    * Sixths
    */
  /**
    * Eighths
    */
  /**
    * Tenths
    */
  /**
    * Twelfths
    */
  .portable-one-whole {
    width: 100%; }
  .portable-one-half, .portable-two-quarters, .portable-three-sixths, .portable-four-eighths, .portable-five-tenths, .portable-six-twelfths {
    width: 50%; }
  .portable-one-third, .portable-two-sixths, .portable-four-twelfths {
    width: 33.333%; }
  .portable-two-thirds, .portable-four-sixths, .portable-eight-twelfths {
    width: 66.666%; }
  .portable-one-quarter, .portable-two-eighths, .portable-three-twelfths {
    width: 25%; }
  .portable-three-quarters, .portable-six-eighths, .portable-nine-twelfths {
    width: 75%; }
  .portable-one-fifth, .portable-two-tenths {
    width: 20%; }
  .portable-two-fifths, .portable-four-tenths {
    width: 40%; }
  .portable-three-fifths, .portable-six-tenths {
    width: 60%; }
  .portable-four-fifths, .portable-eight-tenths {
    width: 80%; }
  .portable-one-sixth, .portable-two-twelfths {
    width: 16.666%; }
  .portable-five-sixths, .portable-ten-twelfths {
    width: 83.333%; }
  .portable-one-eighth {
    width: 12.5%; }
  .portable-three-eighths {
    width: 37.5%; }
  .portable-five-eighths {
    width: 62.5%; }
  .portable-seven-eighths {
    width: 87.5%; }
  .portable-one-tenth {
    width: 10%; }
  .portable-three-tenths {
    width: 30%; }
  .portable-seven-tenths {
    width: 70%; }
  .portable-nine-tenths {
    width: 90%; }
  .portable-one-twelfth {
    width: 8.333%; }
  .portable-five-twelfths {
    width: 41.666%; }
  .portable-seven-twelfths {
    width: 58.333%; }
  .portable-eleven-twelfths {
    width: 91.666%; } }

@media only screen and (min-width: 1100px) {
  /**
    * Whole
    */
  /**
    * Halves
    */
  /**
    * Thirds
    */
  /**
    * Quarters
    */
  /**
    * Fifths
    */
  /**
    * Sixths
    */
  /**
    * Eighths
    */
  /**
    * Tenths
    */
  /**
    * Twelfths
    */
  .desk-one-whole {
    width: 100%; }
  .desk-one-half, .desk-two-quarters, .desk-three-sixths, .desk-four-eighths, .desk-five-tenths, .desk-six-twelfths {
    width: 50%; }
  .desk-one-third, .desk-two-sixths, .desk-four-twelfths {
    width: 33.333%; }
  .desk-two-thirds, .desk-four-sixths, .desk-eight-twelfths {
    width: 66.666%; }
  .desk-one-quarter, .desk-two-eighths, .desk-three-twelfths {
    width: 25%; }
  .desk-three-quarters, .desk-six-eighths, .desk-nine-twelfths {
    width: 75%; }
  .desk-one-fifth, .desk-two-tenths {
    width: 20%; }
  .desk-two-fifths, .desk-four-tenths {
    width: 40%; }
  .desk-three-fifths, .desk-six-tenths {
    width: 60%; }
  .desk-four-fifths, .desk-eight-tenths {
    width: 80%; }
  .desk-one-sixth, .desk-two-twelfths {
    width: 16.666%; }
  .desk-five-sixths, .desk-ten-twelfths {
    width: 83.333%; }
  .desk-one-eighth {
    width: 12.5%; }
  .desk-three-eighths {
    width: 37.5%; }
  .desk-five-eighths {
    width: 62.5%; }
  .desk-seven-eighths {
    width: 87.5%; }
  .desk-one-tenth {
    width: 10%; }
  .desk-three-tenths {
    width: 30%; }
  .desk-seven-tenths {
    width: 70%; }
  .desk-nine-tenths {
    width: 90%; }
  .desk-one-twelfth {
    width: 8.333%; }
  .desk-five-twelfths {
    width: 41.666%; }
  .desk-seven-twelfths {
    width: 58.333%; }
  .desk-eleven-twelfths {
    width: 91.666%; } }

/**
 * If you have set the additional `$responsive-extra` variable to ‘true’ in
 * `_vars.scss` then you now have access to the following class available to
 * accomodate much larger screen resolutions.
 */
/* endif */
/*------------------------------------*\
    $PUSH
\*------------------------------------*/
/**
 * Push classes, to move grid items over to the right by certain amounts.
 */
/**
     * Whole
     */
.push--one-whole {
  left: 100%; }

/**
     * Halves
     */
.push--one-half, .push--two-quarters, .push--three-sixths, .push--four-eighths, .push--five-tenths, .push--six-twelfths {
  left: 50%; }

/**
     * Thirds
     */
.push--one-third, .push--two-sixths, .push--four-twelfths {
  left: 33.333%; }

.push--two-thirds, .push--four-sixths, .push--eight-twelfths {
  left: 66.666%; }

/**
     * Quarters
     */
.push--one-quarter, .push--two-eighths, .push--three-twelfths {
  left: 25%; }


.push--three-quarters, .push--six-eighths, .push--nine-twelfths {
  left: 75%; }

/**
     * Fifths
     */
.push--one-fifth, .push--two-tenths {
  left: 20%; }

.push--two-fifths, .push--four-tenths {
  left: 40%; }

.push--three-fifths, .push--six-tenths {
  left: 60%; }

.push--four-fifths, .push--eight-tenths {
  left: 80%; }

/**
     * Sixths
     */
.push--one-sixth, .push--two-twelfths {
  left: 16.666%; }




.push--five-sixths, .push--ten-twelfths {
  left: 83.333%; }

/**
     * Eighths
     */
.push--one-eighth {
  left: 12.5%; }


.push--three-eighths {
  left: 37.5%; }


.push--five-eighths {
  left: 62.5%; }


.push--seven-eighths {
  left: 87.5%; }

/**
     * Tenths
     */
.push--one-tenth {
  left: 10%; }


.push--three-tenths {
  left: 30%; }




.push--seven-tenths {
  left: 70%; }


.push--nine-tenths {
  left: 90%; }

/**
     * Twelfths
     */
.push--one-twelfth {
  left: 8.333%; }




.push--five-twelfths {
  left: 41.666%; }


.push--seven-twelfths {
  left: 58.333%; }




.push--eleven-twelfths {
  left: 91.666%; }

/**
 * Not a particularly great selector, but the DRYest way to do things.
 */
[class*="push--"] {
  position: relative; }

@media only screen and (max-width: 739px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
  .push--palm-one-whole {
    left: 100%; }
  .push--palm-one-half, .push--palm-two-quarters, .push--palm-three-sixths, .push--palm-four-eighths, .push--palm-five-tenths, .push--palm-six-twelfths {
    left: 50%; }
  .push--palm-one-third, .push--palm-two-sixths, .push--palm-four-twelfths {
    left: 33.333%; }
  .push--palm-two-thirds, .push--palm-four-sixths, .push--palm-eight-twelfths {
    left: 66.666%; }
  .push--palm-one-quarter, .push--palm-two-eighths, .push--palm-three-twelfths {
    left: 25%; }
  .push--palm-three-quarters, .push--palm-six-eighths, .push--palm-nine-twelfths {
    left: 75%; }
  .push--palm-one-fifth, .push--palm-two-tenths {
    left: 20%; }
  .push--palm-two-fifths, .push--palm-four-tenths {
    left: 40%; }
  .push--palm-three-fifths, .push--palm-six-tenths {
    left: 60%; }
  .push--palm-four-fifths, .push--palm-eight-tenths {
    left: 80%; }
  .push--palm-one-sixth, .push--palm-two-twelfths {
    left: 16.666%; }
  .push--palm-five-sixths, .push--palm-ten-twelfths {
    left: 83.333%; }
  .push--palm-one-eighth {
    left: 12.5%; }
  .push--palm-three-eighths {
    left: 37.5%; }
  .push--palm-five-eighths {
    left: 62.5%; }
  .push--palm-seven-eighths {
    left: 87.5%; }
  .push--palm-one-tenth {
    left: 10%; }
  .push--palm-three-tenths {
    left: 30%; }
  .push--palm-seven-tenths {
    left: 70%; }
  .push--palm-nine-tenths {
    left: 90%; }
  .push--palm-one-twelfth {
    left: 8.333%; }
  .push--palm-five-twelfths {
    left: 41.666%; }
  .push--palm-seven-twelfths {
    left: 58.333%; }
  .push--palm-eleven-twelfths {
    left: 91.666%; } }

@media only screen and (min-width: 740px) and (max-width: 1099px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
  .push--lap-one-whole {
    left: 100%; }
  .push--lap-one-half, .push--lap-two-quarters, .push--lap-three-sixths, .push--lap-four-eighths, .push--lap-five-tenths, .push--lap-six-twelfths {
    left: 50%; }
  .push--lap-one-third, .push--lap-two-sixths, .push--lap-four-twelfths {
    left: 33.333%; }
  .push--lap-two-thirds, .push--lap-four-sixths, .push--lap-eight-twelfths {
    left: 66.666%; }
  .push--lap-one-quarter, .push--lap-two-eighths, .push--lap-three-twelfths {
    left: 25%; }
  .push--lap-three-quarters, .push--lap-six-eighths, .push--lap-nine-twelfths {
    left: 75%; }
  .push--lap-one-fifth, .push--lap-two-tenths {
    left: 20%; }
  .push--lap-two-fifths, .push--lap-four-tenths {
    left: 40%; }
  .push--lap-three-fifths, .push--lap-six-tenths {
    left: 60%; }
  .push--lap-four-fifths, .push--lap-eight-tenths {
    left: 80%; }
  .push--lap-one-sixth, .push--lap-two-twelfths {
    left: 16.666%; }
  .push--lap-five-sixths, .push--lap-ten-twelfths {
    left: 83.333%; }
  .push--lap-one-eighth {
    left: 12.5%; }
  .push--lap-three-eighths {
    left: 37.5%; }
  .push--lap-five-eighths {
    left: 62.5%; }
  .push--lap-seven-eighths {
    left: 87.5%; }
  .push--lap-one-tenth {
    left: 10%; }
  .push--lap-three-tenths {
    left: 30%; }
  .push--lap-seven-tenths {
    left: 70%; }
  .push--lap-nine-tenths {
    left: 90%; }
  .push--lap-one-twelfth {
    left: 8.333%; }
  .push--lap-five-twelfths {
    left: 41.666%; }
  .push--lap-seven-twelfths {
    left: 58.333%; }
  .push--lap-eleven-twelfths {
    left: 91.666%; } }

@media only screen and (min-width: 740px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
  .push--lap-and-up-one-whole {
    left: 100%; }
  .push--lap-and-up-one-half, .push--lap-and-up-two-quarters, .push--lap-and-up-three-sixths, .push--lap-and-up-four-eighths, .push--lap-and-up-five-tenths, .push--lap-and-up-six-twelfths {
    left: 50%; }
  .push--lap-and-up-one-third, .push--lap-and-up-two-sixths, .push--lap-and-up-four-twelfths {
    left: 33.333%; }
  .push--lap-and-up-two-thirds, .push--lap-and-up-four-sixths, .push--lap-and-up-eight-twelfths {
    left: 66.666%; }
  .push--lap-and-up-one-quarter, .push--lap-and-up-two-eighths, .push--lap-and-up-three-twelfths {
    left: 25%; }
  .push--lap-and-up-three-quarters, .push--lap-and-up-six-eighths, .push--lap-and-up-nine-twelfths {
    left: 75%; }
  .push--lap-and-up-one-fifth, .push--lap-and-up-two-tenths {
    left: 20%; }
  .push--lap-and-up-two-fifths, .push--lap-and-up-four-tenths {
    left: 40%; }
  .push--lap-and-up-three-fifths, .push--lap-and-up-six-tenths {
    left: 60%; }
  .push--lap-and-up-four-fifths, .push--lap-and-up-eight-tenths {
    left: 80%; }
  .push--lap-and-up-one-sixth, .push--lap-and-up-two-twelfths {
    left: 16.666%; }
  .push--lap-and-up-five-sixths, .push--lap-and-up-ten-twelfths {
    left: 83.333%; }
  .push--lap-and-up-one-eighth {
    left: 12.5%; }
  .push--lap-and-up-three-eighths {
    left: 37.5%; }
  .push--lap-and-up-five-eighths {
    left: 62.5%; }
  .push--lap-and-up-seven-eighths {
    left: 87.5%; }
  .push--lap-and-up-one-tenth {
    left: 10%; }
  .push--lap-and-up-three-tenths {
    left: 30%; }
  .push--lap-and-up-seven-tenths {
    left: 70%; }
  .push--lap-and-up-nine-tenths {
    left: 90%; }
  .push--lap-and-up-one-twelfth {
    left: 8.333%; }
  .push--lap-and-up-five-twelfths {
    left: 41.666%; }
  .push--lap-and-up-seven-twelfths {
    left: 58.333%; }
  .push--lap-and-up-eleven-twelfths {
    left: 91.666%; } }

@media only screen and (max-width: 1099px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
  .push--portable-one-whole {
    left: 100%; }
  .push--portable-one-half, .push--portable-two-quarters, .push--portable-three-sixths, .push--portable-four-eighths, .push--portable-five-tenths, .push--portable-six-twelfths {
    left: 50%; }
  .push--portable-one-third, .push--portable-two-sixths, .push--portable-four-twelfths {
    left: 33.333%; }
  .push--portable-two-thirds, .push--portable-four-sixths, .push--portable-eight-twelfths {
    left: 66.666%; }
  .push--portable-one-quarter, .push--portable-two-eighths, .push--portable-three-twelfths {
    left: 25%; }
  .push--portable-three-quarters, .push--portable-six-eighths, .push--portable-nine-twelfths {
    left: 75%; }
  .push--portable-one-fifth, .push--portable-two-tenths {
    left: 20%; }
  .push--portable-two-fifths, .push--portable-four-tenths {
    left: 40%; }
  .push--portable-three-fifths, .push--portable-six-tenths {
    left: 60%; }
  .push--portable-four-fifths, .push--portable-eight-tenths {
    left: 80%; }
  .push--portable-one-sixth, .push--portable-two-twelfths {
    left: 16.666%; }
  .push--portable-five-sixths, .push--portable-ten-twelfths {
    left: 83.333%; }
  .push--portable-one-eighth {
    left: 12.5%; }
  .push--portable-three-eighths {
    left: 37.5%; }
  .push--portable-five-eighths {
    left: 62.5%; }
  .push--portable-seven-eighths {
    left: 87.5%; }
  .push--portable-one-tenth {
    left: 10%; }
  .push--portable-three-tenths {
    left: 30%; }
  .push--portable-seven-tenths {
    left: 70%; }
  .push--portable-nine-tenths {
    left: 90%; }
  .push--portable-one-twelfth {
    left: 8.333%; }
  .push--portable-five-twelfths {
    left: 41.666%; }
  .push--portable-seven-twelfths {
    left: 58.333%; }
  .push--portable-eleven-twelfths {
    left: 91.666%; } }

@media only screen and (min-width: 1100px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
  .push--desk-one-whole {
    left: 100%; }
  .push--desk-one-half, .push--desk-two-quarters, .push--desk-three-sixths, .push--desk-four-eighths, .push--desk-five-tenths, .push--desk-six-twelfths {
    left: 50%; }
  .push--desk-one-third, .push--desk-two-sixths, .push--desk-four-twelfths {
    left: 33.333%; }
  .push--desk-two-thirds, .push--desk-four-sixths, .push--desk-eight-twelfths {
    left: 66.666%; }
  .push--desk-one-quarter, .push--desk-two-eighths, .push--desk-three-twelfths {
    left: 25%; }
  .push--desk-three-quarters, .push--desk-six-eighths, .push--desk-nine-twelfths {
    left: 75%; }
  .push--desk-one-fifth, .push--desk-two-tenths {
    left: 20%; }
  .push--desk-two-fifths, .push--desk-four-tenths {
    left: 40%; }
  .push--desk-three-fifths, .push--desk-six-tenths {
    left: 60%; }
  .push--desk-four-fifths, .push--desk-eight-tenths {
    left: 80%; }
  .push--desk-one-sixth, .push--desk-two-twelfths {
    left: 16.666%; }
  .push--desk-five-sixths, .push--desk-ten-twelfths {
    left: 83.333%; }
  .push--desk-one-eighth {
    left: 12.5%; }
  .push--desk-three-eighths {
    left: 37.5%; }
  .push--desk-five-eighths {
    left: 62.5%; }
  .push--desk-seven-eighths {
    left: 87.5%; }
  .push--desk-one-tenth {
    left: 10%; }
  .push--desk-three-tenths {
    left: 30%; }
  .push--desk-seven-tenths {
    left: 70%; }
  .push--desk-nine-tenths {
    left: 90%; }
  .push--desk-one-twelfth {
    left: 8.333%; }
  .push--desk-five-twelfths {
    left: 41.666%; }
  .push--desk-seven-twelfths {
    left: 58.333%; }
  .push--desk-eleven-twelfths {
    left: 91.666%; } }

/*------------------------------------*\
    $PULL
\*------------------------------------*/
/**
 * Pull classes, to move grid items over to the right by certain amounts.
 */
/**
 * Not a particularly great selector, but the DRYest way to do things.
 */
[class*="pull--"] {
  position: relative; }

/**
     * Whole
     */
.pull--one-whole {
  right: 100%; }

/**
     * Halves
     */
.pull--one-half, .pull--two-quarters, .pull--three-sixths, .pull--four-eighths, .pull--five-tenths, .pull--six-twelfths {
  right: 50%; }

/**
     * Thirds
     */
.pull--one-third, .pull--two-sixths, .pull--four-twelfths {
  right: 33.333%; }

.pull--two-thirds, .pull--four-sixths, .pull--eight-twelfths {
  right: 66.666%; }

/**
     * Quarters
     */
.pull--one-quarter, .pull--two-eighths, .pull--three-twelfths {
  right: 25%; }


.pull--three-quarters, .pull--six-eighths, .pull--nine-twelfths {
  right: 75%; }

/**
     * Fifths
     */
.pull--one-fifth, .pull--two-tenths {
  right: 20%; }

.pull--two-fifths, .pull--four-tenths {
  right: 40%; }

.pull--three-fifths, .pull--six-tenths {
  right: 60%; }

.pull--four-fifths, .pull--eight-tenths {
  right: 80%; }

/**
     * Sixths
     */
.pull--one-sixth, .pull--two-twelfths {
  right: 16.666%; }




.pull--five-sixths, .pull--ten-twelfths {
  right: 83.333%; }

/**
     * Eighths
     */
.pull--one-eighth {
  right: 12.5%; }


.pull--three-eighths {
  right: 37.5%; }


.pull--five-eighths {
  right: 62.5%; }


.pull--seven-eighths {
  right: 87.5%; }

/**
     * Tenths
     */
.pull--one-tenth {
  right: 10%; }


.pull--three-tenths {
  right: 30%; }




.pull--seven-tenths {
  right: 70%; }


.pull--nine-tenths {
  right: 90%; }

/**
     * Twelfths
     */
.pull--one-twelfth {
  right: 8.333%; }




.pull--five-twelfths {
  right: 41.666%; }


.pull--seven-twelfths {
  right: 58.333%; }




.pull--eleven-twelfths {
  right: 91.666%; }

@media only screen and (max-width: 739px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
  .pull--palm-one-whole {
    right: 100%; }
  .pull--palm-one-half, .pull--palm-two-quarters, .pull--palm-three-sixths, .pull--palm-four-eighths, .pull--palm-five-tenths, .pull--palm-six-twelfths {
    right: 50%; }
  .pull--palm-one-third, .pull--palm-two-sixths, .pull--palm-four-twelfths {
    right: 33.333%; }
  .pull--palm-two-thirds, .pull--palm-four-sixths, .pull--palm-eight-twelfths {
    right: 66.666%; }
  .pull--palm-one-quarter, .pull--palm-two-eighths, .pull--palm-three-twelfths {
    right: 25%; }
  .pull--palm-three-quarters, .pull--palm-six-eighths, .pull--palm-nine-twelfths {
    right: 75%; }
  .pull--palm-one-fifth, .pull--palm-two-tenths {
    right: 20%; }
  .pull--palm-two-fifths, .pull--palm-four-tenths {
    right: 40%; }
  .pull--palm-three-fifths, .pull--palm-six-tenths {
    right: 60%; }
  .pull--palm-four-fifths, .pull--palm-eight-tenths {
    right: 80%; }
  .pull--palm-one-sixth, .pull--palm-two-twelfths {
    right: 16.666%; }
  .pull--palm-five-sixths, .pull--palm-ten-twelfths {
    right: 83.333%; }
  .pull--palm-one-eighth {
    right: 12.5%; }
  .pull--palm-three-eighths {
    right: 37.5%; }
  .pull--palm-five-eighths {
    right: 62.5%; }
  .pull--palm-seven-eighths {
    right: 87.5%; }
  .pull--palm-one-tenth {
    right: 10%; }
  .pull--palm-three-tenths {
    right: 30%; }
  .pull--palm-seven-tenths {
    right: 70%; }
  .pull--palm-nine-tenths {
    right: 90%; }
  .pull--palm-one-twelfth {
    right: 8.333%; }
  .pull--palm-five-twelfths {
    right: 41.666%; }
  .pull--palm-seven-twelfths {
    right: 58.333%; }
  .pull--palm-eleven-twelfths {
    right: 91.666%; } }

@media only screen and (min-width: 740px) and (max-width: 1099px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
  .pull--lap-one-whole {
    right: 100%; }
  .pull--lap-one-half, .pull--lap-two-quarters, .pull--lap-three-sixths, .pull--lap-four-eighths, .pull--lap-five-tenths, .pull--lap-six-twelfths {
    right: 50%; }
  .pull--lap-one-third, .pull--lap-two-sixths, .pull--lap-four-twelfths {
    right: 33.333%; }
  .pull--lap-two-thirds, .pull--lap-four-sixths, .pull--lap-eight-twelfths {
    right: 66.666%; }
  .pull--lap-one-quarter, .pull--lap-two-eighths, .pull--lap-three-twelfths {
    right: 25%; }
  .pull--lap-three-quarters, .pull--lap-six-eighths, .pull--lap-nine-twelfths {
    right: 75%; }
  .pull--lap-one-fifth, .pull--lap-two-tenths {
    right: 20%; }
  .pull--lap-two-fifths, .pull--lap-four-tenths {
    right: 40%; }
  .pull--lap-three-fifths, .pull--lap-six-tenths {
    right: 60%; }
  .pull--lap-four-fifths, .pull--lap-eight-tenths {
    right: 80%; }
  .pull--lap-one-sixth, .pull--lap-two-twelfths {
    right: 16.666%; }
  .pull--lap-five-sixths, .pull--lap-ten-twelfths {
    right: 83.333%; }
  .pull--lap-one-eighth {
    right: 12.5%; }
  .pull--lap-three-eighths {
    right: 37.5%; }
  .pull--lap-five-eighths {
    right: 62.5%; }
  .pull--lap-seven-eighths {
    right: 87.5%; }
  .pull--lap-one-tenth {
    right: 10%; }
  .pull--lap-three-tenths {
    right: 30%; }
  .pull--lap-seven-tenths {
    right: 70%; }
  .pull--lap-nine-tenths {
    right: 90%; }
  .pull--lap-one-twelfth {
    right: 8.333%; }
  .pull--lap-five-twelfths {
    right: 41.666%; }
  .pull--lap-seven-twelfths {
    right: 58.333%; }
  .pull--lap-eleven-twelfths {
    right: 91.666%; } }

@media only screen and (min-width: 1100px) {
  /**
     * Whole
     */
  /**
     * Halves
     */
  /**
     * Thirds
     */
  /**
     * Quarters
     */
  /**
     * Fifths
     */
  /**
     * Sixths
     */
  /**
     * Eighths
     */
  /**
     * Tenths
     */
  /**
     * Twelfths
     */
  .pull--desk-one-whole {
    right: 100%; }
  .pull--desk-one-half, .pull--desk-two-quarters, .pull--desk-three-sixths, .pull--desk-four-eighths, .pull--desk-five-tenths, .pull--desk-six-twelfths {
    right: 50%; }
  .pull--desk-one-third, .pull--desk-two-sixths, .pull--desk-four-twelfths {
    right: 33.333%; }
  .pull--desk-two-thirds, .pull--desk-four-sixths, .pull--desk-eight-twelfths {
    right: 66.666%; }
  .pull--desk-one-quarter, .pull--desk-two-eighths, .pull--desk-three-twelfths {
    right: 25%; }
  .pull--desk-three-quarters, .pull--desk-six-eighths, .pull--desk-nine-twelfths {
    right: 75%; }
  .pull--desk-one-fifth, .pull--desk-two-tenths {
    right: 20%; }
  .pull--desk-two-fifths, .pull--desk-four-tenths {
    right: 40%; }
  .pull--desk-three-fifths, .pull--desk-six-tenths {
    right: 60%; }
  .pull--desk-four-fifths, .pull--desk-eight-tenths {
    right: 80%; }
  .pull--desk-one-sixth, .pull--desk-two-twelfths {
    right: 16.666%; }
  .pull--desk-five-sixths, .pull--desk-ten-twelfths {
    right: 83.333%; }
  .pull--desk-one-eighth {
    right: 12.5%; }
  .pull--desk-three-eighths {
    right: 37.5%; }
  .pull--desk-five-eighths {
    right: 62.5%; }
  .pull--desk-seven-eighths {
    right: 87.5%; }
  .pull--desk-one-tenth {
    right: 10%; }
  .pull--desk-three-tenths {
    right: 30%; }
  .pull--desk-seven-tenths {
    right: 70%; }
  .pull--desk-nine-tenths {
    right: 90%; }
  .pull--desk-one-twelfth {
    right: 8.333%; }
  .pull--desk-five-twelfths {
    right: 41.666%; }
  .pull--desk-seven-twelfths {
    right: 58.333%; }
  .pull--desk-eleven-twelfths {
    right: 91.666%; } }

/*------------------------------------*\
    $BRAND
\*------------------------------------*/
/**
 * `.brand` is a quick and simple way to apply your brand face and/or color to
 * any element using a handy helper class.
 */
.brand {
  font-family: "Gotham SSm A", "Gotham SSm B", sans-serif!important;
  color: #4a8ec2!important; }

.brand-face {
  font-family: "Gotham SSm A", "Gotham SSm B", sans-serif!important; }

.brand-color, .brand-colour {
  color: #4a8ec2!important; }

/*------------------------------------*\
    $HELPER
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * Add/remove floats
 */
.float--right {
  float: right !important; }

.float--left {
  float: left !important; }

.float--none {
  float: none !important; }

/**
 * Text alignment
 */
.text--left {
  text-align: left !important; }

.text--center {
  text-align: center !important; }

.text--right {
  text-align: right !important; }

/**
 * Font weights
 */
.weight--light {
  font-weight: 300 !important; }

.weight--normal {
  font-weight: 400 !important; }

.weight--semibold {
  font-weight: 600 !important; }

/**
 * Add/remove margins
 */
.push {
  margin: 24px !important; }

.push--top {
  margin-top: 24px !important; }

.push--right {
  margin-right: 24px !important; }

.push--bottom {
  margin-bottom: 24px !important; }

.push--left {
  margin-left: 24px !important; }

.push--ends {
  margin-top: 24px !important;
  margin-bottom: 24px !important; }

.push--sides {
  margin-right: 24px !important;
  margin-left: 24px !important; }

.push-half {
  margin: 12px !important; }

.push-half--top {
  margin-top: 12px !important; }

.push-half--right {
  margin-right: 12px !important; }

.push-half--bottom {
  margin-bottom: 12px !important; }

.push-half--left {
  margin-left: 12px !important; }

.push-half--ends {
  margin-top: 12px !important;
  margin-bottom: 12px !important; }

.push-half--sides {
  margin-right: 12px !important;
  margin-left: 12px !important; }

.flush {
  margin: 0 !important; }

.flush--top {
  margin-top: 0 !important; }

.flush--right {
  margin-right: 0 !important; }

.flush--bottom {
  margin-bottom: 0 !important; }

.flush--left {
  margin-left: 0 !important; }

.flush--ends {
  margin-top: 0 !important;
  margin-bottom: 0 !important; }

.flush--sides {
  margin-right: 0 !important;
  margin-left: 0 !important; }

/**
 * Add/remove paddings
 */
.soft {
  padding: 24px !important; }

.soft--top {
  padding-top: 24px !important; }

.soft--right {
  padding-right: 24px !important; }

.soft--bottom {
  padding-bottom: 24px !important; }

.soft--left {
  padding-left: 24px !important; }

.soft--ends {
  padding-top: 24px !important;
  padding-bottom: 24px !important; }

.soft--sides {
  padding-right: 24px !important;
  padding-left: 24px !important; }

.soft-half {
  padding: 12px !important; }

.soft-half--top {
  padding-top: 12px !important; }

.soft-half--right {
  padding-right: 12px !important; }

.soft-half--bottom {
  padding-bottom: 12px !important; }

.soft-half--left {
  padding-left: 12px !important; }

.soft-half--ends {
  padding-top: 12px !important;
  padding-bottom: 12px !important; }

.soft-half--sides {
  padding-right: 12px !important;
  padding-left: 12px !important; }

.hard {
  padding: 0 !important; }

.hard--top {
  padding-top: 0 !important; }

.hard--right {
  padding-right: 0 !important; }

.hard--bottom {
  padding-bottom: 0 !important; }

.hard--left {
  padding-left: 0 !important; }

.hard--ends {
  padding-top: 0 !important;
  padding-bottom: 0 !important; }

.hard--sides {
  padding-right: 0 !important;
  padding-left: 0 !important; }

/**
 * Pull items full width of `.island` parents.
 */
.full-bleed {
  margin-right: -24px !important;
  margin-left: -24px !important; }
  .islet .full-bleed {
    margin-right: -12px !important;
    margin-left: -12px !important; }

/**
 * Add a help cursor to any element that gives the user extra information on
 * `:hover`.
 */
.informative {
  cursor: help !important; }

/**
 * Mute an object by reducing its opacity.
 */
.muted {
  opacity: 0.5 !important;
  filter: alpha(opacity=50) !important; }

/**
 * Align items to the right where they imply progression/movement forward, e.g.:
 *
   <p class=proceed><a href=#>Read more...</a></p>
 *
 */
.proceed {
  text-align: right !important; }

/**
 * Add a right-angled quote to links that imply movement, e.g.:
 *
   <a href=# class=go>Read more</a>
 *
 */
.go:after {
  content: "\00A0" "\00BB" !important; }

/**
 * Apply capital case to an element (usually a `strong`).
 */
.caps {
  text-transform: uppercase !important; }

/**
 * Hide content off-screen without resorting to `display:none;`, also provide
 * breakpoint specific hidden elements.
 */
.accessibility, .visuallyhidden {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important; }

@media only screen and (max-width: 739px) {
  .accessibility--palm, .visuallyhidden--palm {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important; } }

@media only screen and (min-width: 740px) and (max-width: 1099px) {
  .accessibility--lap, .visuallyhidden--lap {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important; } }

@media only screen and (min-width: 740px) {
  .accessibility--lap-and-up, .visuallyhidden--lap-and-up {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important; } }

@media only screen and (max-width: 1099px) {
  .accessibility--portable, .visuallyhidden--portable {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important; } }

@media only screen and (min-width: 1100px) {
  .accessibility--desk, .visuallyhidden--desk {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important; } }

@media only screen and (min-width: 1400px) {
  .accessibility--desk-wide, .visuallyhidden--desk-wide {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important; } }

/* endif */
/*------------------------------------*\
  $HELPER
\*------------------------------------*/
/**
* A series of helper classes to use arbitrarily. Only use a helper class if an
* element/component doesn’t already have a class to which you could apply this
* styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
* that ruleset as opposed to adding the `.float--left` class to the markup.
*
* A lot of these classes carry `!important` as you will always want them to win
* out over other selectors.
*/
/**
* Positions
*/
.relative {
  position: relative !important; }

.centered--v {
  position: absolute;
  top: 50%;
  transform: translateY(-50%); }

.centered--v--h, .icon-congratulations:before, .nav--social-bar li a i, .island--social .nav--social, .alert .nav--social, .nav--social-bar li a:before, .island--social .nav--social, .alert .nav--social {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%); }

.centered--h {
  position: absolute !important;
  left: 50%;
  transform: translate(-50%, 0%); }

.centered--h--bottom {
  position: absolute !important;
  left: 50%;
  top: 100%;
  transform: translate(-50%, -100%); }

.centered--h--fixed {
  position: fixed !important;
  left: 50%;
  transform: translate(-50%, 0%); }

/**
 * Softness (padding)
 */
.soft-quarter--left {
  padding-left: 6px; }

.soft-half-double--top {
  padding-top: 36px; }

.soft-half-double--bottom {
  padding-bottom: 36px; }

.soft-half-double--ends {
  padding-top: 36px;
  padding-bottom: 36px; }

.soft-double {
  padding: 48px !important; }

.soft-double--top {
  padding-top: 48px !important; }

.soft-double--bottom {
  padding-bottom: 48px !important; }

.soft-double--left {
  padding-left: 48px; }

.soft-double--right {
  padding-right: 48px; }

.soft-double--ends {
  padding-top: 48px !important;
  padding-bottom: 48px !important; }

.soft-double--sides {
  padding-right: 48px !important;
  padding-left: 48px !important; }

.soft-triple--top {
  padding-top: 72px; }

.soft-triple--bottom {
  padding-bottom: 72px; }

.soft-triple--left {
  padding-left: 72px; }

.soft-triple--right {
  padding-right: 72px; }

.soft-triple--ends {
  padding-top: 72px !important;
  padding-bottom: 72px !important; }

.soft-triple--sides {
  padding-right: 72px;
  padding-left: 72px; }

.soft-triple--sides {
  padding-right: 72px;
  padding-left: 72px; }

.soft-quadruple--top {
  padding-top: 96px; }

.soft-quadruple--ends {
  padding-top: 96px !important;
  padding-bottom: 96px !important; }

@media only screen and (min-width: 740px) {
  .soft-inside-sides--one-twelfth {
    padding-left: 8.333% !important;
    padding-right: 8.333% !important; } }

.push-double--top {
  margin-top: 48px !important; }

.push-triple--top {
  margin-top: 72px !important; }

@media only screen and (max-width: 739px) {
  .centered--v--palm {
    position: absolute;
    top: 50%;
    transform: translateY(-50%); }
  .centered--v--h--palm {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); }
  .centered--h--bottom--palm {
    position: absolute !important;
    left: 50%;
    top: 100%;
    transform: translate(-50%, -100%); }
  .flush--palm {
    margin: 0 !important; }
  .hard--palm {
    padding: 0 !important; }
  .soft-quadruple--top--palm {
    padding-top: 96px !important; }
  .soft--top--palm {
    padding-top: 24px !important; }
  .soft-double--top--palm {
    padding-top: 48px !important; }
  .soft--bottom--palm {
    padding-bottom: 24px !important; }
  .soft-double--right--palm {
    padding-right: 48px; }
  .soft-double--palm {
    padding: 48px !important; }
  .text--center--palm {
    text-align: center !important; }
  .text--left--palm {
    text-align: left !important; }
  .text--right--palm {
    text-align: right !important; } }

@media only screen and (min-width: 740px) and (max-width: 1099px) {
  .centered--v--lap {
    position: absolute;
    top: 50%;
    transform: translateY(-50%); }
  .centered--v--h--lap {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); }
  .centered--h--bottom--lap {
    position: absolute !important;
    left: 50%;
    top: 100%;
    transform: translate(-50%, -100%); }
  .flush--lap {
    margin: 0 !important; }
  .hard--lap {
    padding: 0 !important; }
  .soft-quadruple--top--lap {
    padding-top: 96px !important; }
  .soft--top--lap {
    padding-top: 24px !important; }
  .soft-double--top--lap {
    padding-top: 48px !important; }
  .soft--bottom--lap {
    padding-bottom: 24px !important; }
  .soft-double--right--lap {
    padding-right: 48px; }
  .soft-double--lap {
    padding: 48px !important; }
  .text--center--lap {
    text-align: center !important; }
  .text--left--lap {
    text-align: left !important; }
  .text--right--lap {
    text-align: right !important; } }

@media only screen and (min-width: 740px) {
  .centered--v--lap-and-up {
    position: absolute;
    top: 50%;
    transform: translateY(-50%); }
  .centered--v--h--lap-and-up {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); }
  .centered--h--bottom--lap-and-up {
    position: absolute !important;
    left: 50%;
    top: 100%;
    transform: translate(-50%, -100%); }
  .flush--lap-and-up {
    margin: 0 !important; }
  .hard--lap-and-up {
    padding: 0 !important; }
  .soft-quadruple--top--lap-and-up {
    padding-top: 96px !important; }
  .soft--top--lap-and-up {
    padding-top: 24px !important; }
  .soft-double--top--lap-and-up {
    padding-top: 48px !important; }
  .soft--bottom--lap-and-up {
    padding-bottom: 24px !important; }
  .soft-double--right--lap-and-up {
    padding-right: 48px; }
  .soft-double--lap-and-up {
    padding: 48px !important; }
  .text--center--lap-and-up {
    text-align: center !important; }
  .text--left--lap-and-up {
    text-align: left !important; }
  .text--right--lap-and-up {
    text-align: right !important; } }

@media only screen and (max-width: 1099px) {
  .centered--v--portable {
    position: absolute;
    top: 50%;
    transform: translateY(-50%); }
  .centered--v--h--portable {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); }
  .centered--h--bottom--portable {
    position: absolute !important;
    left: 50%;
    top: 100%;
    transform: translate(-50%, -100%); }
  .flush--portable {
    margin: 0 !important; }
  .hard--portable {
    padding: 0 !important; }
  .soft-quadruple--top--portable {
    padding-top: 96px !important; }
  .soft--top--portable {
    padding-top: 24px !important; }
  .soft-double--top--portable {
    padding-top: 48px !important; }
  .soft--bottom--portable {
    padding-bottom: 24px !important; }
  .soft-double--right--portable {
    padding-right: 48px; }
  .soft-double--portable {
    padding: 48px !important; }
  .text--center--portable {
    text-align: center !important; }
  .text--left--portable {
    text-align: left !important; }
  .text--right--portable {
    text-align: right !important; } }

@media only screen and (min-width: 1100px) {
  .centered--v--desk {
    position: absolute;
    top: 50%;
    transform: translateY(-50%); }
  .centered--v--h--desk {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); }
  .centered--h--bottom--desk {
    position: absolute !important;
    left: 50%;
    top: 100%;
    transform: translate(-50%, -100%); }
  .flush--desk {
    margin: 0 !important; }
  .hard--desk {
    padding: 0 !important; }
  .soft-quadruple--top--desk {
    padding-top: 96px !important; }
  .soft--top--desk {
    padding-top: 24px !important; }
  .soft-double--top--desk {
    padding-top: 48px !important; }
  .soft--bottom--desk {
    padding-bottom: 24px !important; }
  .soft-double--right--desk {
    padding-right: 48px; }
  .soft-double--desk {
    padding: 48px !important; }
  .text--center--desk {
    text-align: center !important; }
  .text--left--desk {
    text-align: left !important; }
  .text--right--desk {
    text-align: right !important; } }

@media only screen and (min-width: 1400px) {
  .centered--v--desk-wide {
    position: absolute;
    top: 50%;
    transform: translateY(-50%); }
  .centered--v--h--desk-wide {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); }
  .centered--h--bottom--desk-wide {
    position: absolute !important;
    left: 50%;
    top: 100%;
    transform: translate(-50%, -100%); }
  .flush--desk-wide {
    margin: 0 !important; }
  .hard--desk-wide {
    padding: 0 !important; }
  .soft-quadruple--top--desk-wide {
    padding-top: 96px !important; }
  .soft--top--desk-wide {
    padding-top: 24px !important; }
  .soft-double--top--desk-wide {
    padding-top: 48px !important; }
  .soft--bottom--desk-wide {
    padding-bottom: 24px !important; }
  .soft-double--right--desk-wide {
    padding-right: 48px; }
  .soft-double--desk-wide {
    padding: 48px !important; }
  .text--center--desk-wide {
    text-align: center !important; }
  .text--left--desk-wide {
    text-align: left !important; }
  .text--right--desk-wide {
    text-align: right !important; } }

/**
 *  Text Alignment Helpers
 */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\
    $GRID EXTRAS
\*------------------------------------*/
/**
 * Mainly based on csswizardry grids at https://github.com/csswizardry/csswizardry-grids/
 * Growing set of additional classes to build out more complex layouts within the same grid system.


/**
 * Reversed grids allow you to structure your source in the opposite order to
 * how your rendered layout will appear. Extends `.grid`.
 */
.grid--rev {
  direction: rtl;
  text-align: left; }
  .grid--rev > .grid__item {
    direction: ltr;
    text-align: left; }

/**
 * Gutterless grids have all the properties of regular grids, minus any spacing.
 * Extends `.grid`.
 */
.grid--full {
  margin-left: 0; }
  .grid--full > .grid__item {
    padding-left: 0; }

/**
 * Align the entire grid to the right. Extends `.grid`.
 */
.grid--right {
  text-align: right; }
  .grid--right > .grid__item {
    text-align: left; }

/**
 * Centered grids align grid items centrally without needing to use push or pull
 * classes. Extends `.grid`.
 */
.grid--center {
  text-align: center; }
  .grid--center > .grid__item {
    text-align: left; }

/**
 * Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends
 * `.grid`.
 */
.grid--middle > .grid__item {
  vertical-align: middle; }

.grid--bottom > .grid__item {
  vertical-align: bottom; }

/**
 * Create grids with narrower gutters. Extends `.grid`.
 */
.grid--narrow {
  margin-left: -12px; }
  .grid--narrow > .grid__item {
    padding-left: 12px; }

/**
 * Create grids with wider gutters. Extends `.grid`.
 */
@media only screen and (min-width: 1100px) {
  .grid--wide {
    margin-left: -96px; }
    .grid--wide > .grid__item {
      padding-left: 96px; } }

/**
 * Create grids auto grid with for budding items right up to eachother.
 */
.grid__item.auto {
  width: auto; }

/**
    * Import Mixins to provide modules with exports.
    * List other required modules here.
    */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\

    /**
    * Variables
    */
/*------------------------------------*\

    /**
    * @title Screen
    */
/*------------------------------------*\
    
    Screen Globals

    */
body {
  margin: 0 !important;
  background: #ffffff;
  font-weight: 300;
  color: #38393a; }

.row {
  width: 100%;
  max-width: 1180px;
  margin: auto; }
  .row.row--large {
    max-width: 1280px; }
  .row.row--xsmall {
    max-width: 980px; }
  .row.row--xsmall {
    max-width: 740px; }

/**
     * @state: Nav is open state
     */
.site {
  overflow-x: hidden;
  transition: opacity 0.4s, transform 0.6s cubic-bezier(0.165, 0.84, 0.44, 1); }
  .state-nav-is-shown .site {
    transition: transform 0.6s cubic-bezier(0.165, 0.84, 0.44, 1); }

@media only screen and (min-width: 740px) {
  body:not(.compatibility) .site {
    transform: translateY(0%); }
    .state-nav-is-shown body:not(.compatibility) .site {
      transform: translateY(320px); } }

@media only screen and (min-width: 740px) {
  .site {
    opacity: 0; } }
.ecobee-shop .site, .is-ready .site {
  opacity: 1; }

/**
     * @export Screen Globals
     */
/**
    * Import Mixins to provide modules with exports.
    * List other required modules here.
    */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\

    /**
    * Variables
    */
/*------------------------------------*\

    /**
    * @title Logo
    */
/**
        * @name Logo as Iconfont 
        * @description Style for the logo__text class. Shop requires specific classes to render the SVG properly. Add .as-svg class.
        * @markup
        * <a class="logo ">
        * <i class="logo__mark icon-logo-icon"></i> 
        * <i class="logo__text icon-logo-text"><span class="visuallyhidden">Ecobee</span></i>
        * </a>
        */
.logo__text {
  transition: transform 0.5s, opacity 0.2s;
  opacity: 0;
  font-size: 40px;
  font-size: 2.5rem;
  line-height: 1.2;
  position: absolute;
  top: 50%;
  color: #799d4b !important;
  display: none; }
  @media only screen and (min-width: 740px) {
    .logo__text {
      opacity: 1;
      transform: translate(46px, -50%) scale(1);
      transition: transform 0.5s, opacity 0.2s;
      display: block; } }
  .logo__text.as-svg, .logo__text.as-svg img {
    width: 120px; }

.logo__mark {
  display: none;
  border-radius: 50%;
  font-size: 23px;
  font-size: 1.4375rem;
  line-height: 1.04348;
  transition: transform 0.4s 0.2s;
  transform: translate(0%, -50%);
  position: absolute;
  top: 50%;
  background: #799d4b;
  color: #ffffff;
  height: 40px;
  width: 40px;
  line-height: 40px;
  display: inline-block;
  text-align: center; }
  .logo__mark:before {
    margin-left: -2px; }

.compatibility .nav-section--primary .logo__text {
  color: #ffffff !important; }

.compatibility .nav-section--primary .logo__mark {
  background: #ffffff;
  color: #799d4b; }


/**
     * @export Logo
     */
/**
    * Import Mixins to provide modules with exports.
    * List other required modules here.
    */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\

    /**
    * Variables
    */
/*------------------------------------*\

    /**
    * @title Images
    */
/**
	* @name Circle Images
	* @description Style for the img--circle class
	* @markup
	*   <figure class="img--circle"><img src="http://placehold.it/150x150" /></figure>
	*/
.img--circle, .img--circle > img {
  border-radius: 100%; }

.img--block, .post img, .img--block img, .img--block .post img, .post .img--block img {
  display: block;
  width: 100%;
  height: auto; }

.img--contain {
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
  height: 200px; }

.img--cover, .img--featured {
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center center; }

/**
	* @name Greyscale Images
	* @description Style for the img--circle class
	* @markup
	*   <figure class="img--greyscale"><img src="http://placehold.it/150x150/497529" /></figure>
	*/
.img--greyscale, .img--greyscale img {
  filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");
  /* Firefox 10+ */
  filter: gray;
  /* IE6-9 */
  -webkit-filter: grey;
  /* Chrome 19+ & Safari 6+ */
  -webkit-transition: all 0.6s ease;
  /* Fade to color for Chrome and Safari */
  -webkit-backface-visibility: hidden;
  /* Fix for transition flickering */ }
  a .img--greyscale:hover, a .img--greyscale img:hover {
    filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0\'/></filter></svg>#grayscale");
    -webkit-filter: grey; }
.img--greyscale svg {
  background: url(http://4.bp.blogspot.com/-IzPWLqY4gJ0/T01CPzNb1KI/AAAAAAAACgA/_8uyj68QhFE/s400/a2cf7051-5952-4b39-aca3-4481976cb242.jpg); }
.img--greyscale svg image {
  transition: all 0.6s ease; }
.img--greyscale svg image:hover {
  opacity: 0; }

/**
	* @name Img--Shadowed
	* @description Style for the img--shadowed class
	* @markup
	*   <figure class="img--block  img--shadowed"><img src="http://placehold.it/150x150/497529" /></figure>
	*/
.img--shadowed {
  position: relative;
  box-shadow: 0 0 1px #dddcdc;
  backface-visibility: hidden; }
  .img--shadowed img {
    position: relative;
    z-index: 1; }
  .img--shadowed:after, .img--shadowed:before {
    z-index: -1;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: #becfa6;
    content: ' ';
    transform: translate(0, 0);
    transition: all 0.2s;
    opacity: 0; }
  a .img--shadowed:hover:after, .img--shadowed:before {
    opacity: 1;
    transform: translate(5px, 5px);
    transition: all 0.2s; }
  .img--shadowed:before {
    background: #e7e6e7; }


.post__img--large {
  position: relative;
  margin-right: -30%;
  margin-left: -30%;
  display: block;
  margin-bottom: 24px; }
  .post__img--large > * {
    width: 100% !important; }
  .post__img--large .img__caption {
    text-align: center;
    font-size: 13px;
    font-size: 0.8125rem;
    line-height: 1.84615;
    color: #c9c7c8; }

.img--featured {
  height: 500px;
  margin-top: -120px; }

.img--logo {
  max-width: 150px;
  width: 100%;
  display: block;
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center; }

figure.img--logo {
  height: 150px;
  margin: auto; }

img.img--logo {
  max-width: 121px; }

@media only screen and (min-width: 740px) {
  .img--align--left {
    position: absolute;
    left: -100%;
    top: 24px;
    width: 100%; } }

/**
    * Import Mixins to provide modules with exports.
    * List other required modules here.
    */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\

    /**
    * Variables
    */
/*------------------------------------*\

    /**
    * @title Headings
    */
.compatibility h1, .compatibility .alpha, .compatibility h2, .compatibility .beta, .compatibility h3, .compatibility .gamma {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

/**
	* @name h1
	* @description also referred to as .alpha
	* @markup
	*   <h1 class="alpha">This is a Heading</h1>
	*/
h1, .alpha {
  font-weight: 300;
  color: #38393a; }
  @media only screen and (max-width: 739px) {
    h1, .alpha {
      font-size: 40px;
      font-size: 2.5rem;
      line-height: 1.2; } }
  h3.hN + h1.hN, h3.hN + .alpha.hN {
    margin-left: -0.08em; }

/**
	* @name h2
	* @description also referred to as .beta
	* @markup
	*   <h2 class="beta">This is a Heading</h2>
	*/
h2, .beta {
  font-weight: 300;
  color: #38393a; }
  @media only screen and (max-width: 739px) {
    h2, .beta {
      font-size: 22px;
      font-size: 1.375rem;
      line-height: 1.09091; } }
  h2.title, .beta.title {
    line-height: 1.5;
    margin-bottom: 12px; }

/**
	* @name h3
	* @description also referred to as .gamma
	* @markup
	*   <h3 class="gamma">This is a Heading</h3>
	*/
h3, .gamma {
  color: #38393a;
  font-weight: 400; }
  h3.hN, .gamma.hN {
    font-weight: 300; }
  @media only screen and (max-width: 739px) {
    h3, .gamma {
      font-size: 18px;
      font-size: 1.125rem;
      line-height: 1.33333; } }

/**
	* @name h4
	* @description also referred to as .delta
	* @markup
	*   <h4 class="delta">This is a Heading</h4>
	*/
h4, .delta {
  margin-bottom: 12px;
  font-weight: 400;
  color: #38393a; }
  @media only screen and (max-width: 739px) {
    h4, .delta {
      font-size: 18px;
      font-size: 1.125rem;
      line-height: 1.33333; } }

/**
	* @name h5
	* @description also referred to as .epsilon
	* @markup
	*   <h5 class="epsilon">This is a Heading</h5>
	*/
h5, .epsilon, .nav__label {
  text-transform: uppercase;
  letter-spacing: 0.1em;
  color: #38393a;
  font-weight: 500;
  margin: 0; }
  @media only screen and (max-width: 739px) {
    h5, .epsilon {
      font-size: 11px;
      font-size: 0.6875rem;
      line-height: 2.18182; } }

/**
	* @name h6
	* @description also referred to as .zeta
	* @markup
	*   <h6 class="zeta">This is a Heading</h6>
	*/
h6, .zeta {
  font-weight: 500; }
  @media only screen and (max-width: 739px) {
    h6, .zeta {
      font-size: 16px;
      font-size: 1rem;
      line-height: 1.5; } }

hgroup .hN {
  margin-bottom: 6px; }

/**
     * @export Headings
     */
/**
    * Import Mixins to provide modules with exports.
    * List other required modules here.
    */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\

    /**
    * Variables
    */
/*------------------------------------*\

    /**
    * @title type
    */
.strong, strong {
  font-weight: 500 !important; }

p.lead, p.leader {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5; }
  @media only screen and (min-width: 740px) {
    p.lead {
      font-size: 18px;
      font-size: 1.125rem;
      line-height: 1.33333;
      line-height: 1.5; } }
p.leader {
  letter-spacing: 0.035em; }

b, strong {
  font-weight: 500; }

.label-text, .island--navigation a {
  font-size: 13px;
  font-size: 0.8125rem;
  line-height: 1.84615;
  font-weight: 400; }

/**
	 * $ADDRESS
	 */
.address, address {
  font-style: normal; }

/**
	 * $CMS Formated
	 */

.format img {
  display: block;
  width: 100%;
  margin-bottom: 24px; }

/**
    * Import Mixins to provide modules with exports.
    * List other required modules here.
    */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\

    /**
    * Variables
    */
/*------------------------------------*\

    /**
    * @title Links
    */
/**
    * @name Anchor
    * @description Primary link color is Green
    * 
    * @markup
    * <a>This is a Link</a>
    */
a {
  color: #799d4b;
  text-decoration: none;
  transition: all 0.2s;
  /**
        * @name Secondary Anchor (depreciated)
        * 
        * @markup
        * <a class="link--secondary">This is a Link</a>
        */
  /**
        * @name Tertiary Anchor
        * 
        * @markup
        * <a class="link--tertiary">This is a Link</a>
        */
  /**
        * @name Inverted Anchor
        * 
        * @markup
        * <a class="link--inverted">This is a Link</a>
        */
  /**
        * @name Inverted Natural
        * 
        * @markup
        * <a class="link--natural">This is a Link</a>
        */
  /**
        * @name Bordered
        * @description Usually only used when text is white
        * 
        * @markup
        * <a class="link--bordered">This is a Link</a>
        * 
        */ }
  a:hover {
    color: #497529; }
  a.link--primary {
    font-weight: 500;
    font-size: 13px;
    font-size: 0.8125rem;
    line-height: 1.84615; }
  a.link--tertiary, .nav--global a {
    color: #38393a;
    font-weight: 500; }
    a.link--tertiary:hover, .nav--global a:hover {
      color: #799d4b; }
  a.link--inverted {
    color: #ffffff; }
    a.link--inverted:hover {
      color: #497529; }
  a.link--natural {
    color: inherit; }
    a.link--natural:hover {
      color: inherit; }
  a.link--bordered {
    border-bottom: 1px solid; }

.link--secondary > a, .link--secondary > .list--secondary li a, .list--secondary li .link--secondary > a {
  font-weight: 400; }

/**
     * Link Complex
     * 
     * As inspired by @necolas:
     * github.com/necolas/suit-utils/blob/master/link.css#L18
     *
     * Add hover behaviour to only selected items within links, e.g.:
     *
       <a href=log-in class=link-complex>
           <i class="s  s--user"></i>
           <span class=link-complex__target>Log in</span>
       </a>
     *
     * Demo: jsfiddle.net/inuitcss/rt9M3
     *
     */
.link-complex, .link-complex:hover, .link-complex:active, .link-complex:focus {
  color: inherit; }
  .link-complex .link-complex__target, .link-complex:hover .link-complex__target, .link-complex:active .link-complex__target, .link-complex:focus .link-complex__target {
    color: #799d4b;
    transition: all 0.2s; }

.link-complex:hover .link-complex__target, .link-complex:active .link-complex__target, .link-complex:focus .link-complex__target {
  color: #497529; }

/**
     * @export Links
     */
/**
    * Import Mixins to provide modules with exports.
    * List other required modules here.
    */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\

    /**
    * Variables
    */
/*------------------------------------*\

    /**
    * @title Logo
    */
/**
	* @title Lists
	*/
/**
	* @name Bulleted List
	* @description Adds a small dot before bulleted list items
	* 
	* @markup
	* <ul class="list--bulleted">
	* <li>This is a list item</li>
	* <li>This is a list item</li>
	* <li>This is a list item</li>
	* </ul>
	*/
.list--bulleted, .format ul:not(.gform_fields) {
  margin-left: 0em;
  list-style: none; }
  .list--bulleted li, .list--bulleted .format ul:not(.gform_fields), .format .list--bulleted ul:not(.gform_fields) {
    position: relative;
    margin-bottom: 12px;
    padding-left: 24px; }
    .list--bulleted li:before, .list--bulleted .format ul:not(.gform_fields), .format .list--bulleted ul:not(.gform_fields) {
      content: ' ';
      height: 4px;
      width: 4px;
      border-radius: 50%;
      position: absolute;
      top: 10px;
      font-size: 20px;
      line-height: 0;
      left: 0;
      background: #c9c7c8; }

/**
	* @name Non-Bulleted List
	* @description Adds a small dot before bulleted list items
	* 
	* @markup
	* <ul class="list--not-bulleted">
	* <li>This is a list item</li>
	* <li>This is a list item</li>
	* <li>This is a list item</li>
	* </ul>
	*/
.list--not-bulleted {
  list-style: none;
  margin: 0;
  padding: 0; }
  .list--not-bulleted li {
    padding-left: 0 !important; }
    .list--not-bulleted li:before {
      display: none !important; }

/**
	* @name List Secondary
	* @description Extends our secondary with the anchor items
	* 
	* @markup
	* <ul class="list--secondary">
	* <li><a>This is a list item</a></li>
	* <li><a>This is a list item</a></li>
	* <li><a>This is a list item</a></li>
	* </ul>
	*/
.list--secondary {
  margin-left: 0em;
  list-style: none; }
  .list--secondary li {
    margin-bottom: 12px; }

/**
	* @name List Numbered (ol)
	* @description Extends our secondary style
	* 
	* @markup
	* <ol class="list--numbered">
	* <li>This is a list item</li>
	* <li>This is a list item</li>
	* <li>This is a list item</li>
	* </ol>
	*/
.list--numbered, ol {
  margin-left: 0em;
  color: #6d6a69;
  font-weight: 300; }
  .list--numbered li, ol li {
    margin-bottom: 12px;
    margin-left: 24px;
    position: relative;
    padding-left: 12px; }

/**
     * @export Lists
     */
/**
    * Import Mixins to provide modules with exports.
    * List other required modules here.
    */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\

    /**
    * Variables
    */
/*------------------------------------*\

    /**
    * @title Icons
    */
/**
	* @title Icons
	*/
/**
	* @name Basic Icon
	*
	* @markup
	* <i class="icon icon-tools"></i>
	*/
.icon, .mfp-iframe-holder button.mfp-close {
  font-size: 25px;
  font-size: 1.5625rem;
  line-height: 1.92;
  color: #74b3de; }

/**
	* @name Icon with Circle
	*
	* @markup
	* <i class="icon icon-tools icon--circled"></i>
	*/
.icon--circled {
  border-radius: 50%;
  border: 1px solid;
  height: 36px;
  width: 36px;
  text-align: center;
  line-height: 28.8px; }

/**
	* @name Icon With Text
	* @description For text-links that have an icon with them and want a larger, explicity set gap.
	* @markup
	* <a href=# ><i class="icon--with-text icon-tools"></i>Help &amp; support</a>
	*/
.icon--with-text, .icon--with-text-large, .icon--with-text--rev {
  font-size: 15px;
  position: relative;
  top: 2px;
  margin-right: 12px; }

.icon--with-text-large {
  font-size: 35px;
  line-height: 0;
  top: 6px; }

/**
	* @name Reversed  Icon With Text
	* @description For text-links that have an icon with them and want a larger, explicity set gap on the right side.
	* @markup
	* <a href=# >Help &amp; support<i class="icon--with-text--rev icon-tools"></i></a>
	*/
.icon--with-text--rev {
  margin-right: 0;
  margin-left: 12px; }

/**
	* @name Primary Icon
	*
	* @markup
	* <i class="icon icon-tools icon--primary"></i>
	*/
.icon--primary {
  font-size: 45px;
  font-size: 2.8125rem;
  line-height: 1.06667;
  display: block; }
  @media only screen and (min-width: 740px) { }

/**
	* @name Secondary Icon
	*
	* @markup
	* <i class="icon icon-tools icon--secondary"></i>
	*/
.icon--secondary {
  font-size: 14px;
  position: relative;
  top: 2px;
  padding-left: 4px;
  padding-right: 4px; }

/**
	* @name Tertiary Icon
	*
	* @markup
	* <i class="icon icon-tools icon--tertiary"></i>
	*/
.icon--tertiary {
  color: #c9c7c8;
  font-size: 60px;
  font-size: 3.75rem;
  line-height: 1.2; }

/**
	* @name Quarternary Icon
	*
	* @markup
	* <i class="icon icon-tools icon--quaternary"></i>
	*/
.icon--quaternary {
  color: #91c3e5;
  height: 70px;
  width: 70px;
  font-size: 70px;
  text-align: center;
  line-height: 70px; }

/**
	* @name Giga Icon
	*
	* @markup
	* <i class="icon icon-tools icon--giga"></i>
	*/
.icon--giga {
  font-size: 90px;
  font-size: 5.625rem;
  line-height: 1.06667;
  line-height: 1; }

/**
	* @name Small Icon
	*
	* @markup
	* <i class="icon icon-tools icon--small"></i>
	*/
.icon--small {
  font-size: 10px;
  font-size: 0.625rem;
  line-height: 2.4;
  line-height: 1; }

/*------------------------------------*\
	$Animation/transforms
	\*------------------------------------*/
/**
	* @name Icon With Rotation
	*
	* @markup
	* <i class="icon icon-tools icon--with-rotation"></i>
	*/
.icon--with-rotation {
  transform: rotate(45deg);
  transition: transform 0.2s ease;
  position: absolute;
  right: 18px;
  top: 50%;
  margin-top: -18px !important; }
  .link-complex:hover .icon--with-rotation {
    transform: rotate(0deg);
    transition: transform 0.2s ease; }

/*------------------------------------*\
	$MISC
	\*------------------------------------*/
.icon-help {
  font-size: 17px; }

.icon-arrow-left {
  top: 0px; }

.icon-facebook-sign {
  font-size: 17px; }

.icon-number-1 {
  text-indent: -5px; }

.icon-congratulations {
  color: #ffffff;
  font-size: 170px;
  font-size: 10.625rem;
  line-height: 1.12941;
  transition: all 1s ease-in 1s;
  position: relative;
  display: block; }
  .icon-congratulations:before {
    position: absolute; }

/*------------------------------------*\
	$Fixes
	\*------------------------------------*/
.mfp-iframe-holder button.mfp-close {
  color: transparent !important;
  width: 40px;
  height: 50px;
  left: 100%;
  top: 0px;
  opacity: 1;
  margin: 0;
  line-height: 0;
  padding: 0; }
  .mfp-iframe-holder button.mfp-close:before {
    font-family: 'icomoon';
    color: #74b3de;
    position: absolute;
    right: 0;
    line-height: 1;
    top: 1px; }

/**
     * @export Icons
     */
/**
    * Import Mixins to provide modules with exports.
    * List other required modules here.
    */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\

    /**
    * Variables
    */
/*------------------------------------*\

    /**
    * @title SVGS
    */
.svg-defs {
  display: none; }

.icon--svg--primary svg, .icon--svg--secondary svg, .icon--svg--tertiary svg, .icon--svg--logo svg {
  fill: #799d4b; }

.icon--svg--primary, .icon--svg--primary svg {
  height: 60px;
  width: 60px; }

.icon--svg--secondary, .icon--svg--secondary svg {
  height: 45px;
  width: 45px; }

.icon--svg--tertiary, .icon--svg--tertiary svg {
  height: 20px;
  width: 20px; }

.icon--svg--logo {
  overflow: hidden;
  width: 50px;
  display: block;
  transition: width 0.1s; }
  @media only screen and (min-width: 740px) {
    .icon--svg--logo {
      width: 190px;
      max-height: 81px; } }
  .icon--svg--logo svg {
    width: 190px;
    max-height: 81px; }

/**
	 * Specific Icon styles
	 */
.icon--svg--cart {
  position: relative;
  top: 2px; }

.icon--svg--primary.icon--smartsi, .icon--svg--primary.icon--smartsi svg {
  height: 60px;
  width: 85px; }

/**
     * @export SVGS
     */
/**
    * Import Mixins to provide modules with exports.
    * List other required modules here.
    */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\

    /**
    * Variables
    */
/*------------------------------------*\

    /**
    * @title Logo
    */
/**
	* @name Button (white background)
	* @description Default button state.
	* 
	* @markup
	* <a class="btn">This is a button</a>
	*/
.btn, .nav--global .menu-item-88 a, .nav--global .button a, .nav--btn--secondary li a, .nav--btn--secondary li a, .nav--btn--tertiary li a, .nav--social-bar, .island--social .nav--social, .alert .nav--social, .page-numbers li a, .page-numbers li span {
  background: none;
  border: none;
  color: #799d4b;
  transition: all 0.2s;
  font-weight: 700;
  padding-left: 1.5em;
  padding-right: 1.5em;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  font-size: 0.8rem; }
  .btn:hover, .nav--global .menu-item-88 a:hover, .nav--global .button a:hover, .nav--btn--secondary li a:hover, .nav--btn--secondary li a:hover, .nav--btn--tertiary li a:hover, .nav--social-bar, .island--social .nav--social, .alert .nav--social, .page-numbers li a:hover, .page-numbers li span:hover {
    transition: all 0.2s; }

/**
	* @name Button Text
	* @description Like a button, but just a text link.
	* 
	* @markup
	* <a class="btn btn--text">This is a button</a>
	*/
.btn--text {
  font-weight: 500;
  text-transform: none;
  letter-spacing: 0;
  padding-left: 0;
  padding-right: 0; }

/**
	* @name Primary Button
	* @description Used for the main CTA(s) on the page or post. Example "Pre-order Now".
	* 
	* @markup
	* <a class="btn btn--primary">This is a button</a>
	*/
.btn--primary, .btn--inverted, .nav--btn--secondary li a {
  background: #799d4b;
  color: #ffffff;
  padding-left: 3em;
  padding-right: 3em;
  line-height: 3.5;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }
  .btn--primary:hover, .btn--inverted:hover, .nav--btn--secondary li a:hover {
    color: #ffffff;
    background: #497529; }
  .btn--primary.btn--large, .btn--large.btn--inverted, .nav--btn--secondary li a.btn--large {
    line-height: 5; }

/**
	* @name Secondary Button
	* @description Used for second most important actions on the page or post. Example "Pre-order Now".
	* 
	* @markup
	* <a class="btn btn--secondary">This is a button</a>
	*/
.btn--secondary, .nav--global .menu-item-88 a, .nav--global .button a, .nav--btn--secondary li a, .page-numbers li .next, .page-numbers li .prev {
  color: #799d4b;
  background: none;
  border: 3px solid;
  padding-left: 2.5em;
  padding-right: 2.5em; }
  .btn--secondary:hover, .nav--global .menu-item-88 a:hover, .nav--global .button a:hover, .nav--btn--secondary li a:hover, .page-numbers li .next:hover, .page-numbers li .prev:hover {
    color: #497529; }

/**
	* @name Tertiary Button
	* @description Used for third most important actions on the page or post. Example: social media share links in the blog. 
	* 
	* @markup
	* <a class="btn btn--tertiary">This is a button</a>
	*/
.btn--tertiary, .nav--btn--tertiary li a, .nav--social-bar, .island--social .nav--social, .alert .nav--social {
  background: #e8efde;
  color: #799d4b; }
  .btn--tertiary:hover, .nav--btn--tertiary li a:hover, .nav--social-bar, .island--social .nav--social, .alert .nav--social {
    color: #497529; }

/**
	* @name Inverted Button
	* @description Used on a solid green background. Example: the "Action" banners on the productc pages, or the compatibility checker.
	* 
	* @markup
	* <a class="btn btn--inverted">This is a button</a>
	*/
.btn--inverted {
  background: #ffffff;
  color: #799d4b;
  border: 1px solid #e7e6e7; }
  .btn--inverted:hover {
    color: #497529;
    background: rgba(255, 255, 255, 0.8); }
  .background--blue .btn--inverted {
    color: #74b3de !important; }
    .background--blue .btn--inverted:hover {
      background: rgba(255, 255, 255, 0.8); }
  .background--green .btn--inverted {
    color: #799d4b !important; }
    .background--green .btn--inverted:hover {
      background: rgba(255, 255, 255, 0.8); }
  .background--orange .btn--inverted {
    color: #f47721 !important; }
    .background--orange .btn--inverted:hover {
      background: rgba(255, 255, 255, 0.8); }

/**
	* @name Inactive Button
	* @description Make the button look like normal text when hovered.
	* 
	* @markup
	* <a class="btn btn--inactive">This is a button</a>
	*/
.btn--inactive, .btn:disabled, .nav--global .menu-item-88 a:disabled, .nav--global .button a:disabled, .nav--btn--secondary li a:disabled, .nav--btn--secondary li a:disabled, .nav--btn--tertiary li a:disabled, .nav--social-bar, .island--social .nav--social, .alert .nav--social, .page-numbers li a:disabled, .page-numbers li span:disabled, .page-numbers li .current, .btn--inactive:hover, .btn:hover:disabled, .nav--global .menu-item-88 a:hover:disabled, .nav--global .button a:hover:disabled, .nav--btn--secondary li a:hover:disabled, .nav--btn--secondary li a:hover:disabled, .nav--btn--tertiary li a:hover:disabled, .nav--social-bar, .island--social .nav--social, .alert .nav--social, .page-numbers li a:hover:disabled, .page-numbers li span:hover:disabled, .page-numbers li .current:hover, .btn--inactive:active, .btn:active:disabled, .nav--global .menu-item-88 a:active:disabled, .nav--global .button a:active:disabled, .nav--btn--secondary li a:active:disabled, .nav--btn--secondary li a:active:disabled, .nav--btn--tertiary li a:active:disabled, .nav--social-bar, .island--social .nav--social, .alert .nav--social, .page-numbers li a:active:disabled, .page-numbers li span:active:disabled, .page-numbers li .current:active, .btn--inactive:focus, .btn:focus:disabled, .nav--global .menu-item-88 a:focus:disabled, .nav--global .button a:focus:disabled, .nav--btn--secondary li a:focus:disabled, .nav--btn--secondary li a:focus:disabled, .nav--btn--tertiary li a:focus:disabled, .nav--social-bar, .island--social .nav--social, .alert .nav--social, .page-numbers li a:focus:disabled, .page-numbers li span:focus:disabled, .page-numbers li .current:focus {
  background: none;
  color: rgba(113, 114, 114, 0.2);
  cursor: text;
  /* [1] */ }


/**
	* @name Button With Icon
	* @description Some alternate styles for when buttons have only and icon.
	* 
	* @markup
	* <button class="btn btn--primary btn--with-icon"><i class="icon-search"></i><span class="visuallyhidden">Search</span></button>
	*/
.btn--with-icon {
  padding: 0 1em; }
  .btn--with-icon i {
    top: 0.2em;
    font-size: 20px; }

/**
     * @export Buttons
     */
/**
    * Import Mixins to provide modules with exports.
    * List other required modules here.
    */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\

    /**
    * Variables
    */
/*------------------------------------*\

    /**
    * @title Navs
    */
/**
    *   All Logic pertaining to the top back horizontal navigation
    *   should go in this file. 
    */
/*------------------------------------*\
    
    $Navigation Area

    */
.nav-section--primary {
  left: 0;
  right: 0;
  top: 0;
  width: auto;
  z-index: 4;
  position: absolute; }

.nav-section--primary {
  transition: transform 0.6s cubic-bezier(0.165, 0.84, 0.44, 1);
  /**
            *   Lap and Up
            */
  /**
            *   $State: At top of Page
            */
  /**
            *   $State: Drawer is open
            */
  /**
            *   $Lap and Up States Lap and Up
            */
  /**
            *   Exceptions
            */
  /**
            * Extensions
            */ }
  @media only screen and (min-width: 740px) {
    .nav-section--primary {
      position: fixed;
      transform: translateY(-100%); } }
  .state-page-at-top .nav-section--primary {
    transition: transform 0.6s cubic-bezier(0.165, 0.84, 0.44, 1);
    transform: translateY(0%); }
  .state-nav-is-visible .nav-section--primary {
    transition: transform 0.6s cubic-bezier(0.165, 0.84, 0.44, 1), background 0.6s cubic-bezier(0.165, 0.84, 0.44, 1);
    background: #ffffff;
    border-bottom: 1px solid #f6f6f6;
    transform: translateY(0%); }
    .state-nav-is-visible .nav-section--primary:before {
      background: #ffffff;
      content: ' ';
      bottom: 100%;
      height: 320px;
      position: absolute;
      left: 0;
      right: 0;
      width: auto; }
  @media only screen and (min-width: 740px) {
    .nav-section--primary {
      /**
                *   $State: At top of Page
                */
      /**
                *   $State: Drawer is open
                */ }
      .state-nav-is-shown .nav-section--primary {
        top: 320px; }
      .csscalc.state-nav-is-shown .nav-section--primary {
        transform: translateY(320px);
        top: 0; } }
  .single-post .nav-section--primary, .error404 .nav-section--primary {
    background: #ffffff; }
  .page--register .nav-section--primary, .page--login .nav-section--primary, .ecobee-shop .nav-section--primary {
    position: static !important; }
  .nav-section--primary.is-static {
    transform: translate(0) !important;
    border-bottom: 1px solid #f6f6f6; }

/**
        *   States on HTML element
        */
.state-nav-is-shown {
  overflow: hidden; }

/**
         * Compatibilty page exceptions
         */
.compatibility .nav-section--primary {
  background: rgba(121, 157, 75, 0.6); }
  .state-nav-is-shown .compatibility .nav-section--primary {
    background: #799d4b; }

/**
     * @export Nav
     */
/**
    * Import Mixins to provide modules with exports.
    * List other required modules here.
    */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\

    /**
    * Variables
    */
/*------------------------------------*\

    /**
    * @title Navs
    */
/*------------------------------------*\
    

    */
.nav .current-menu-item a, .nav .current-menu-item .page-numbers, .nav .current-menu-item .nav--social-bar, .nav .current-menu-item .island--social .nav--social, .island--social .nav .current-menu-item .nav--social, .nav .current-menu-item .alert .nav--social, .alert .nav .current-menu-item .nav--social {
  color: #497529; }

.nav--global {
  margin: 0 auto;
  padding: 0;
  list-style: none;
  line-height: 80px;
  height: 80px;
  max-width: 1228px; }
  .nav--global a {
    display: block;
    height: 100%;
    cursor: pointer;
    font-size: 14px;
    font-size: 0.875rem;
    line-height: 1.71429;
    line-height: 80px;
    padding: 0 17.77778px;
    z-index: 1;
    position: relative; }
  .nav--global > li {
    display: inline-block;
    float: right;
    height: 100%;
    text-align: center; }
  .nav--global .nav__logo {
    margin-left: 24px;
    float: left; }
  .nav--global .login > a {
    border: none;
    line-height: 80px;
    margin-right: 17.77778px; }
    .nav--global .login > a:hover {
      color: #799d4b !important; }
      .nav--global .login > a:hover:before {
        color: #799d4b !important; }
    .nav--global .login > a:before {
      transition: color 0.2s;
      position: absolute;
      top: 50%;
      right: 0px;
      margin-top: -6px;
      font-size: 15px;
      color: #38393a; }
  .nav--global .menu-item-88, .nav--global .button {
    height: auto; }
    .nav--global .menu-item-88 a, .nav--global .button a {
      margin: 0 0 0 17.77778px;
      line-height: 2;
      color: #38393a;
      font-size: 14px;
      text-transform: none;
      letter-spacing: 0; }
      .nav--global .menu-item-88 a:hover, .nav--global .button a:hover {
        color: #799d4b; }
      @media only screen and (max-width: 739px) {
        .nav--global .menu-item-88 a, .nav--global .button a {
          padding-left: 1em;
          padding-right: 1em; } }
  .nav--global .nav__trigger {
    padding: 0 41.77778px 0 35.55556px; }
  @media only screen and (max-width: 739px) {
    .nav--global a {
      padding: 0 8.88889px; }
    .nav--global .login a {
      margin: 0; }
      .nav--global .login a:before {
        display: none; }
    .nav--global .nav__trigger {
      padding: 0 29.77778px 0 26.66667px; } }
  .compatibility .nav-section--primary .nav--global a, .compatibility .nav-section--primary .nav--global a:before {
    color: #ffffff !important; }
  .compatibility .nav-section--primary .nav--global a:hover, .compatibility .nav-section--primary .nav--global a:hover:before {
    color: #dddcdc !important; }

/**
            * @name Nav--Stacked
            * @description Style for the nav--stacked class
            * @markup
            *   <nav class="nav--stacked">markup</nav>
            */
.nav--stacked li {
  display: block; }
  .nav--stacked li a {
    font-weight: 500; }

.nav__label {
  display: block;
  padding: 24px 0;
  color: #ffffff; }

.nav--icons li {
  display: inline-block; }
  .nav--icons li a {
    text-align: center;
    position: relative;
    padding: 48px 0 24px;
    display: block;
    font-size: 13px;
    font-size: 0.8125rem;
    line-height: 1.84615;
    font-weight: 500; }
    .nav--icons li a:before {
      font-size: 30px;
      position: absolute;
      left: 50%;
      margin-top: -5px;
      transform: translate(-50%, -120%);
      color: #799d4b;
      transition: color 0.6s cubic-bezier(0.165, 0.84, 0.44, 1); }
    .nav--icons li a:hover:before {
      color: #497529; }
  .nav--icons li.device-ecobee3 a:before {
    font-size: 40px;
    margin-top: 2px; }

/**
            * @name Button Nav
            * 
            * @markup
            * <ul class="nav nav--button">
            * <li><a>This is a list item</a></li>
            * <li><a>This is a list item</a></li>
            * <li><a>This is a list item</a></li>
            * </ul>
            */
.nav--btn li, .nav--btn .nav--social-bar, .nav--btn .island--social .nav--social, .island--social .nav--btn .nav--social, .nav--btn .alert .nav--social, .alert .nav--btn .nav--social {
  margin-right: 24px;
  margin-bottom: 12px; }
  @media only screen and (max-width: 739px) {
    .nav--btn li, .nav--btn .nav--social-bar, .nav--btn .island--social .nav--social, .island--social .nav--btn .nav--social, .nav--btn .alert .nav--social, .alert .nav--btn .nav--social, .nav--btn li a, .nav--btn li .nav--social-bar, .nav--btn li .island--social .nav--social, .island--social .nav--btn li .nav--social, .nav--btn li .alert .nav--social, .alert .nav--btn li .nav--social {
      display: block;
      width: 100%;
      padding-left: 0;
      padding-right: 0;
      text-align: center; } }
@media only screen and (min-width: 740px) {
  .nav--btn.text--right li, .nav--btn.text--right .text--right.nav--social-bar, .nav--btn.text--right .island--social .text--right.nav--social, .island--social .nav--btn.text--right .text--right.nav--social, .nav--btn.text--right .alert .text--right.nav--social, .alert .nav--btn.text--right .text--right.nav--social {
    margin-right: 0;
    margin-left: 24px; } }




.nav .has-image, .nav .page-numbers, .nav .nav--social-bar, .nav .island--social .nav--social, .island--social .nav .nav--social, .nav .alert .nav--social, .alert .nav .nav--social {
  padding-right: 5px; }
  @media only screen and (max-width: 739px) {
    .nav .has-image {
      max-width: 180px; } }
  .nav .has-image a, .nav .has-image .page-numbers, .nav .has-image .nav--social-bar, .nav .has-image .island--social .nav--social, .island--social .nav .has-image .nav--social, .nav .has-image .alert .nav--social, .alert .nav .has-image .nav--social, .nav .has-image img, .nav .has-image .page-numbers, .nav .has-image .nav--social-bar, .nav .has-image .island--social .nav--social, .island--social .nav .has-image .nav--social, .nav .has-image .alert .nav--social, .alert .nav .has-image .nav--social {
    display: block;
    width: 100%; }
  .nav .has-image a, .nav .has-image .page-numbers, .nav .has-image .nav--social-bar, .nav .has-image .island--social .nav--social, .island--social .nav .has-image .nav--social, .nav .has-image .alert .nav--social, .alert .nav .has-image .nav--social {
    padding-right: 3px;
    transition: opacity, 0.2; }
  .nav .has-image:last-of-type a, .nav .has-image:last-of-type .page-numbers, .nav .has-image:last-of-type .nav--social-bar, .nav .has-image:last-of-type .island--social .nav--social, .island--social .nav .has-image:last-of-type .nav--social, .nav .has-image:last-of-type .alert .nav--social, .alert .nav .has-image:last-of-type .nav--social {
    padding-right: 0; }

/**
            * @name Nav--Fit
            * @description Style for the nav--fit class
            * @markup
            *   <div class="nav--fit">markup</div>
            */

.page-numbers li a, .page-numbers li span {
  padding: 0 1em; }
.page-numbers li .next, .page-numbers li .prev {
  margin: 0 24px;
  padding: 0 1.5em; }

.nav--social {
  margin-bottom: 0; }
  .nav--social li {
    padding-left: 15px; }
    .nav--social li:first-child {
      padding-left: 0; }
    .nav--social li a:before {
      font-size: 25px;
      font-size: 1.5625rem;
      line-height: 1.92;
      line-height: 1.8; }
    .footer .nav--social li {
      display: block; }
    @media only screen and (min-width: 740px) {
      .nav--social li a:before {
        font-size: 20px;
        font-size: 1.25rem;
        line-height: 1.2; } }
  .island--social .nav--social li, .alert .nav--social li {
    margin-bottom: 0; }

.nav--social-bar li, .nav--social-bar .island--social .nav--social, .island--social .nav--social-bar .nav--social, .nav--social-bar .alert .nav--social, .alert .nav--social-bar .nav--social {
  display: inline-block;
  width: auto; }
  .nav--social-bar li a, .nav--social-bar li .island--social .nav--social, .island--social .nav--social-bar li .nav--social, .nav--social-bar li .alert .nav--social, .alert .nav--social-bar li .nav--social {
    height: 42px;
    width: 42px;
    position: relative; }
    .nav--social-bar li a i, .nav--social-bar li a .island--social .nav--social, .island--social .nav--social-bar li a .nav--social, .nav--social-bar li a .alert .nav--social, .alert .nav--social-bar li a .nav--social, .nav--social-bar li a:before, .nav--social-bar li .island--social .nav--social, .island--social .nav--social-bar li .nav--social, .nav--social-bar li .alert .nav--social, .alert .nav--social-bar li .nav--social {
      font-size: 18px;
      font-size: 1.125rem;
      line-height: 1.33333; }

/**
     * @export Navs
     */
/**
    * Import Mixins to provide modules with exports.
    * List other required modules here.
    */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\

    /**
    * Variables
    */
/*------------------------------------*\

    /**
    * @title Navigation
    */
/*------------------------------------*\
    
    $Base Island Styles

    */
.island--navigation {
  position: relative; }
  .island--navigation a {
    font-weight: 500;
    display: block; }
  .island--navigation i {
    display: block;
    margin: auto;
    margin-bottom: 12px; }
  .island--navigation span {
    display: block;
    margin: auto; }
  .island--navigation:after {
    content: ' ';
    height: 1px;
    display: block;
    width: auto;
    bottom: 0;
    left: 0;
    right: 0;
    position: absolute;
    background: #f6f6f6;
    z-index: -1; }

/*------------------------------------*\
    
    $Complex Version

    */
.island--navigation--complex .navigation__item:before {
  border-bottom-color: #497529 !important; }
.island--navigation--complex .navigation__item:after {
  border-bottom-color: #ffffff !important; }
.island--navigation--complex .navigation__item:before, .island--navigation--complex .navigation__item:after {
  bottom: 0;
  opacity: 0;
  transform: translateY(-100%);
  transition: all 0.2s ease-in-out; }
.page-child .island--navigation--complex .navigation__item, .page-child .island--navigation--complex .navigation__item a {
  color: #c9c7c8; }
.island--navigation--complex .navigation__item:hover, .island--navigation--complex .navigation__item:hover a, .page-child .island--navigation--complex .navigation__item:hover, .page-child .island--navigation--complex .navigation__item:hover a {
  color: #497529; }
.island--navigation--complex .navigation__item.navigation__item--current a {
  color: #497529; }
@media only screen and (min-width: 740px) {
  .island--navigation--complex .navigation__item.navigation__item--current:before, .island--navigation--complex .navigation__item.navigation__item--current:after {
    opacity: 1;
    transform: translateY(0%); } }

/*
        
        Navigation Group (appears on the register page)
        
    */
.navigation--group {
  border: 1px solid #74b3de;
  border-top: 0;
  overflow: hidden;
  position: relative; }
  .navigation--group:before {
    content: ' ';
    height: 1px;
    background: #74b3de;
    position: absolute;
    left: 0;
    right: 0;
    top: 0px; }
  .navigation--group .navigation__item {
    overflow: hidden; }
    .navigation--group .navigation__item:before {
      border-top-color: #74b3de !important; }
    .navigation--group .navigation__item:after {
      border-top-color: #ffffff !important; }
    .navigation--group .navigation__item:before, .navigation--group .navigation__item:after {
      top: 0px;
      opacity: 0;
      transform: translateY(-100%);
      transition: all 0.2s ease-in-out; }
    .navigation--group .navigation__item a {
      position: relative; }
      .navigation--group .navigation__item a:before {
        content: ' ';
        height: 1px;
        background: #74b3de;
        position: absolute;
        left: 0;
        right: 0;
        top: 0px; }
    .navigation--group .navigation__item.navigation__item--current:before, .navigation--group .navigation__item.navigation__item--current:after, .navigation--group .navigation__item:hover:before, .navigation--group .navigation__item:hover:after {
      opacity: 1;
      transform: translateY(0%); }

/**
     * @export Navigation
     */
/**
    * Import Mixins to provide modules with exports.
    * List other required modules here.
    */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\

    /**
    * Variables
    */
/*------------------------------------*\

    /**
    * @title Slideshow controls
    */
.social-slideshow {
  overflow: hidden; }
  .social-slideshow .slideshow__slide {
    padding: 0 2px; }
  @media only screen and (min-width: 740px) {
    .social-slideshow .slideshow__slide {
      padding: 0 48px; } }

.slideshow__icon {
  position: absolute;
  left: 50%;
  transform: translate(-50%, -150%); }
  @media only screen and (min-width: 740px) {
    .slideshow__icon {
      right: 100%;
      left: auto;
      transform: translate(-100%, -3px); } }

.slideshow__pagination {
  position: absolute;
  display: inline-block;
  margin: 0;
  padding: 0;
  list-style: none;
  cursor: default;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  bottom: 24px;
  z-index: 4;
  width: 100%;
  text-align: center; }
  .slideshow__pagination span {
    position: relative;
    display: inline-block;
    margin: 0 10px;
    width: 12px;
    height: 12px;
    cursor: pointer;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.5);
    cursor: pointer;
    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0);
    transition: box-shadow 0.3s ease, background-color 0.3s ease;
    -webkit-transition: box-shadow 0.3s ease, background-color 0.3s ease;
    -moz-transition: box-shadow 0.3s ease, background-color 0.3s ease;
    -ms-transition: box-shadow 0.3s ease, background-color 0.3s ease;
    -o-transition: box-shadow 0.3s ease, background-color 0.3s ease;
    transition: box-shadow 0.3s ease, background-color 0.3s ease;
    text-indent: -9999px; }
    .slideshow__pagination span.swiper-active-switch, .slideshow__pagination span.active {
      background-color: transparent;
      box-shadow: 0 0 0 2px #ffffff; }
    .slideshow__pagination span:hover, .slideshow__pagination span:focus {
      background-color: white; }
  .slideshow__pagination.slideshow__pagination--ditl {
    left: 0%;
    right: 0; }
  @media only screen and (min-width: 740px) {
    .slideshow__pagination.slideshow__pagination--tweets, .slideshow__pagination.slideshow__pagination--shop {
      position: relative; } }
  .slideshow__pagination.slideshow__pagination--tweets span, .slideshow__pagination.slideshow__pagination--shop span {
    background-color: rgba(116, 179, 222, 0.3);
    box-shadow: 0 0 0 2px rgba(116, 179, 222, 0); }
    .slideshow__pagination.slideshow__pagination--tweets span.swiper-active-switch, .slideshow__pagination.slideshow__pagination--tweets span.active, .slideshow__pagination.slideshow__pagination--shop span.swiper-active-switch, .slideshow__pagination.slideshow__pagination--shop span.active {
      box-shadow: 0 0 0 2px #74b3de; }
    .slideshow__pagination.slideshow__pagination--tweets span:hover, .slideshow__pagination.slideshow__pagination--tweets span:focus, .slideshow__pagination.slideshow__pagination--shop span:hover, .slideshow__pagination.slideshow__pagination--shop span:focus {
      background-color: #74b3de; }

.slideshow__control {
  position: absolute;
  z-index: 10;
  cursor: pointer;
  top: 50%;
  transform: translaleY(-50%); }
  .slideshow__control i {
    margin: auto;
    position: relative; }
    .slideshow__control i:before {
      content: '';
      display: block;
      width: 14px;
      height: 14px;
      margin: auto; }
  .slideshow__control.slideshow__control--right {
    right: 24px; }
    .slideshow__control.slideshow__control--right i:before {
      border: 2px solid rgba(255, 255, 255, 0.5);
      transform: rotate(-45deg);
      border-left: none;
      border-top: none; }
    .on-last .slideshow__control.slideshow__control--right {
      display: none; }
  .slideshow__control.slideshow__control--left {
    left: 24px; }
    .slideshow__control.slideshow__control--left i:before {
      border: 2px solid rgba(255, 255, 255, 0.5);
      transform: rotate(-45deg);
      border-right: none;
      border-bottom: none; }
    #on-slide-1 ~ .slideshow__control.slideshow__control--left i:before {
      border: 2px solid rgba(255, 255, 255, 0); }
  .slideshow__control:hover i:before {
    border-color: #ffffff; }

/**
* @export Slideshow controls
*/
/**
    * Import Mixins to provide modules with exports.
    * List other required modules here.
    */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\

    /**
    * Variables
    */
/*------------------------------------*\

    /**
    * @title SVGS
    */
.product-grid-item__image {
  height: 300px; }
  .product-grid-item__image img {
    height: 300px;
    width: auto;
    margin: auto; }

.feature .feature__icon {
  position: absolute;
  transform: translateY(-100%); }
.feature .feature__title {
  color: #799d4b; }

.sidebar .sidebar__title {
  color: #799d4b; }

/**
    * Import Mixins to provide modules with exports.
    * List other required modules here.
    */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * PLacholder
 */
/**
 * Color Setup
 *
 * We have a mixin to generate our background and border colors.
 */
/**
 * Import Once
 *
 * We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
 */
/*------------------------------------*\

    /**
    * Variables
    */
/*------------------------------------*\

    /**
    * @title Cart
    */
/**
     * Ajaxify Helpers
     */
body.ajaxify-lock {
  overflow: hidden; }

/**
     * Ajaxify Cart - General
     */
.ajaxifyCart--product {
  position: relative; }

.cart-row {
  position: relative;
  padding: 24px 0; }
  .cart-row:after {
    content: ' ';
    height: 1px;
    display: block;
    width: auto;
    bottom: 0;
    left: -72px;
    right: -72px;
    position: absolute;
    background: #f6f6f6;
    z-index: -1; }
  .cart-row:last-of-type:after {
    display: none; }

.ajaxifyCart--product, .cart-row {
  max-height: 500px; }
  .ajaxifyCart--product.is-removed, .cart-row.is-removed {
    overflow: hidden;
    opacity: 0;
    padding: 0;
    backface-visibility: hidden;
    max-height: 0; }

.ajaxifyCart--row {
  clear: both; }

.ajaxCart--product-image {
  display: block;
  overflow: hidden; }
  .ajaxCart--product-image img {
    display: block;
    margin: 0 auto;
    max-width: 100%; }

/**
     * Ajaxify Drawer
     */
.drawer-cart {
  height: 0px;
  overflow: hidden;
  transition: all 600ms cubic-bezier(0.165, 0.84, 0.44, 1);
  /**
         * Drawer colors and general styles
         */ }
  .drawer-cart.is-visible {
    opacity: 1; }
  .drawer-cart .update-cart {
    display: none !important; }
  .drawer-cart .drawer-cart__content {
    margin: 0 auto;
    overflow: hidden;
    padding: 24px 24px;
    position: relative; }
  .drawer-cart.is-visible .drawer-cart__content {
    opacity: 1; }

/**
     * Quantity selector colors in the drawer
     */

.js-qty, .ajaxifyCart--qty {
  position: relative;
  margin-bottom: 1em;
  max-width: 100px;
  overflow: visible;
  backface-visibility: hidden; }

.js--qty-adjuster, .ajaxifyCart--qty-adjuster {
  cursor: pointer;
  position: absolute;
  display: block;
  top: 0;
  bottom: 0;
  padding: 5px 0;
  width: 20px;
  text-align: center;
  overflow: hidden;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  -o-user-select: none;
  user-select: none; }

.js--add, .ajaxifyCart--add {
  right: 0; }

.js--minus, .ajaxifyCart--minus {
  left: 0; }

.ajaxifyCart--qty {
  top: -5px;
  margin-bottom: 0; }
  .ajaxifyCart--qty input[type="text"] {
    display: block;
    background: none;
    text-align: center;
    width: 100%;
    padding: 5px 25px;
    margin: 0; }
    .ajaxify-notouch .ajaxifyCart--qty input[type="text"] {
      border: 1px solid rgba(0, 0, 0, 0); }
  .ajaxifyCart--is-loading .ajaxifyCart--qty {
    opacity: 0.5; }

.cart-row:hover .ajaxifyCart--qty-adjuster, .ajaxifyCart--product:hover .ajaxifyCart--qty-adjuster, .ajaxify-touch .ajaxifyCart--qty-adjuster {
  opacity: 1; }



/* Example wrapper */
.wrap {
  position: relative; }

/* Frame */
.frame {
  height: 400px;
  line-height: 400px;
  overflow: hidden; }

.frame ul {
  list-style: none;
  margin: 0;
  padding: 0;
  height: 100%;
  font-size: 50px; }

.frame ul li {
  float: left;
  width: 600px;
  height: 100%;
  margin: 0 0px 0 0;
  padding: 0;
  text-align: center;
  cursor: pointer; }

.img--cart {
  max-width: 240px;
  margin: auto; }
